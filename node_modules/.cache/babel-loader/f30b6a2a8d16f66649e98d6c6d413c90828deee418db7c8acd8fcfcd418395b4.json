{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      firstChartKey: 0,\n      firstSelectedDate: \"\",\n      secondSelectedDate: \"\",\n      firstSelectedTime: \"\",\n      secondSelectedTime: \"\",\n      firstGraphGenerated: false,\n      secondGraphGenerated: false,\n      firstVoltageList: [],\n      firstCurrentList: [],\n      formattedFirstDateReadings: [],\n      formattedSecondDateReadings: [],\n      formattedFirstCv: [],\n      formattedSecondCv: [],\n      currentList: [],\n      voltageList: [],\n      firstGraphReadings: null,\n      secondGraphReadings: null,\n      selectDeviceID: \"Placeholder\",\n      activeDevices: [],\n      cvReading: [],\n      chartOptions: {\n        stroke: {\n          curve: \"smooth\",\n          width: \"1\"\n        },\n        chart: {\n          id: \"vuechart-example\"\n        },\n        xaxis: {\n          tickAmount: 7\n        }\n      },\n      series1: [{\n        name: \"first_cv_data\",\n        data: []\n      }],\n      series2: [{\n        name: \"second_cv_data\",\n        data: []\n      }]\n    };\n  },\n  mounted() {\n    let lookUpUrlActiveDevices = \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n    let lookUpHeadersActiveDevices = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\"\n      }\n    };\n    let lookUpRequestActiveDevices = {\n      RequestType: \"ActiveDevices\",\n      DataDict: [{\n        DeviceID: \"\",\n        ReadingDate: \"\"\n      }]\n    };\n    axios.post(lookUpUrlActiveDevices, lookUpRequestActiveDevices, lookUpHeadersActiveDevices).then(response => {\n      this.activeDevices = [{\n        text: \"Please select a Device ID\",\n        value: \"Placeholder\"\n      }];\n      for (let i = 0; i < response.data.Values.length; i++) {\n        this.activeDevices.push({\n          text: response.data.Values[i],\n          value: response.data.Values[i]\n        });\n      }\n    });\n  },\n  methods: {\n    generateFirstGraph() {\n      console.log(\"Generating first graph\");\n      for (let i = 0; i < this.firstGraphReadings.length; i++) {\n        if (this.formattedFirstDateReadings[i].selected == true) {\n          this.firstSelectedTime = this.formattedFirstDateReadings[i].time;\n        }\n      }\n      let lookUpUrlFirstCVData = \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n      let lookUpHeadersFirstCVData = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\"\n        }\n      };\n      let lookUpRequestFirstCVData = {\n        RequestType: \"LoadCVData\",\n        DataDict: [{\n          DeviceID: this.selectDeviceID,\n          ReadingDate: this.firstSelectedDate,\n          ReadingTime: this.firstSelectedTime\n        }]\n      };\n      axios.post(lookUpUrlFirstCVData, lookUpRequestFirstCVData, lookUpHeadersFirstCVData).then(response => {\n        console.log(response);\n        this.firstVoltageList = response.data.VoltageList;\n        this.firstCurrentList = response.data.CurrentList;\n        this.formatCV(this.firstVoltageList, this.firstCurrentList);\n        this.firstChartKey += 1;\n        this.firstGraphGenerated = true;\n        console.log(\"First Formatted\", this.formattedFirstCv);\n      });\n    },\n    generateSecondGraph() {\n      console.log(\"Generating second graph\");\n      for (let i = 0; i < this.secondGraphReadings.length; i++) {\n        if (this.formattedSecondDateReadings[i].selected == true) {\n          this.secondSelectedTime = this.formattedSecondDateReadings[i].time;\n        }\n      }\n      let lookUpUrlSecondCVData = \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n      let lookUpHeadersSecondCVData = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\"\n        }\n      };\n      let lookUpRequestSecondCVData = {\n        RequestType: \"LoadCVData\",\n        DataDict: [{\n          DeviceID: this.selectDeviceID,\n          ReadingDate: this.secondSelectedDate,\n          ReadingTime: this.secondSelectedTime\n        }]\n      };\n      axios.post(lookUpUrlSecondCVData, lookUpRequestSecondCVData, lookUpHeadersSecondCVData).then(response => {\n        console.log(response);\n        this.secondVoltageList = response.data.VoltageList;\n        this.secondCurrentList = response.data.CurrentList;\n        this.formatCV2(this.secondVoltageList, this.secondCurrentList);\n        this.secondChartKey += 1;\n        this.secondGraphGenerated = true;\n        console.log(\"Second Formatted\", this.formattedSecondCv);\n      });\n    },\n    timeSelectedFirst(time) {\n      for (let i = 0; i < this.firstGraphReadings.length; i++) {\n        if (this.formattedFirstDateReadings[i].time == time.time) {\n          this.formattedFirstDateReadings[i].selected = true;\n        } else {\n          this.formattedFirstDateReadings[i].selected = false;\n        }\n      }\n    },\n    timeSelectedSecond(time) {\n      for (let i = 0; i < this.secondGraphReadings.length; i++) {\n        if (this.formattedSecondDateReadings[i].time == time.time) {\n          this.formattedSecondDateReadings[i].selected = true;\n        } else {\n          this.formattedSecondDateReadings[i].selected = false;\n        }\n      }\n    },\n    loadCVReadings(deviceID, firstDate, secondDate) {\n      console.log(deviceID, firstDate, secondDate);\n      let lookUpUrlCVReadings = \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n      let lookUpHeadersCVReadings = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\"\n        }\n      };\n      let lookUpRequestCVReadings = {\n        RequestType: \"LoadCVReadingTimes\",\n        DataDict: [{\n          DeviceID: deviceID,\n          FirstDate: firstDate,\n          SecondDate: secondDate\n        }]\n      };\n      axios.post(lookUpUrlCVReadings, lookUpRequestCVReadings, lookUpHeadersCVReadings).then(response => {\n        this.formattedFirstDateReadings = [];\n        this.formattedSecondDateReadings = [];\n        this.firstGraphReadings = [];\n        this.secondGraphReadings = [];\n        if (response.data.FirstDateReadings.length == 0) {\n          this.firstGraphReadings = \"No Data\";\n        } else {\n          this.firstGraphReadings = response.data.FirstDateReadings;\n        }\n        if (response.data.SecondDateReadings.length == 0) {\n          this.secondGraphReadings = \"No Data\";\n        } else {\n          this.secondGraphReadings = response.data.SecondDateReadings;\n        }\n        if (this.firstGraphReadings != \"No Data\") {\n          for (let i = 0; i < this.firstGraphReadings.length; i++) {\n            this.formattedFirstDateReadings.push({\n              time: this.firstGraphReadings[i][0],\n              selected: false\n            });\n          }\n        }\n        if (this.secondGraphReadings != \"No Data\") {\n          for (let i = 0; i < this.secondGraphReadings.length; i++) {\n            this.formattedSecondDateReadings.push({\n              time: this.secondGraphReadings[i][0],\n              selected: false\n            });\n          }\n        }\n        console.log(this.formattedFirstDateReadings);\n        console.log(this.formattedSecondDateReadings);\n      });\n    },\n    formatCV(voltageList, currentList) {\n      this.voltageList = voltageList;\n      this.currentList = currentList;\n      this.formattedFirstCv = [];\n      for (let i = 0; i < this.voltageList.length; i++) {\n        this.formattedFirstCv.push({\n          x: this.voltageList[i],\n          y: this.currentList[i]\n        });\n      }\n      this.series1 = [{\n        name: \"first_cv_data\",\n        data: this.formattedFirstCv\n      }];\n    },\n    formatCV2(voltageList, currentList) {\n      console.log(\"Entered formatCV2\");\n      this.voltageList = voltageList;\n      this.currentList = currentList;\n      this.formattedSecondCv = [];\n      for (let i = 0; i < this.voltageList.length; i++) {\n        this.formattedSecondCv.push({\n          x: this.voltageList[i],\n          y: this.currentList[i]\n        });\n      }\n      this.series2 = [{\n        name: \"second_cv_data\",\n        data: this.formattedSecondCv\n      }];\n    }\n  }\n};","map":{"version":3,"names":["axios","data","firstChartKey","firstSelectedDate","secondSelectedDate","firstSelectedTime","secondSelectedTime","firstGraphGenerated","secondGraphGenerated","firstVoltageList","firstCurrentList","formattedFirstDateReadings","formattedSecondDateReadings","formattedFirstCv","formattedSecondCv","currentList","voltageList","firstGraphReadings","secondGraphReadings","selectDeviceID","activeDevices","cvReading","chartOptions","stroke","curve","width","chart","id","xaxis","tickAmount","series1","name","series2","mounted","lookUpUrlActiveDevices","lookUpHeadersActiveDevices","headers","lookUpRequestActiveDevices","RequestType","DataDict","DeviceID","ReadingDate","post","then","response","text","value","i","Values","length","push","methods","generateFirstGraph","console","log","selected","time","lookUpUrlFirstCVData","lookUpHeadersFirstCVData","lookUpRequestFirstCVData","ReadingTime","VoltageList","CurrentList","formatCV","generateSecondGraph","lookUpUrlSecondCVData","lookUpHeadersSecondCVData","lookUpRequestSecondCVData","secondVoltageList","secondCurrentList","formatCV2","secondChartKey","timeSelectedFirst","timeSelectedSecond","loadCVReadings","deviceID","firstDate","secondDate","lookUpUrlCVReadings","lookUpHeadersCVReadings","lookUpRequestCVReadings","FirstDate","SecondDate","FirstDateReadings","SecondDateReadings","x","y"],"sources":["src/components/MainComponent.vue"],"sourcesContent":["<template>\n  <b-container fluid>\n    <br />\n    <b-row>\n      <b-col cols=\"2\"></b-col>\n      <b-col cols=\"8\">\n        <b-card bg-variant=\"light\">\n          <p>Select Device ID:</p>\n          <b-form-select\n            v-model=\"selectDeviceID\"\n            :options=\"activeDevices\"\n          ></b-form-select>\n          <hr />\n          <b-row>\n            <b-col cols=\"6\">\n              <p>Select First Graph Date:</p>\n              <b-form-datepicker\n                v-model=\"firstSelectedDate\"\n                locale=\"en\"\n              ></b-form-datepicker>\n            </b-col>\n            <b-col cols=\"6\">\n              <p>Select Second Graph Date:</p>\n              <b-form-datepicker\n                v-model=\"secondSelectedDate\"\n                locale=\"en\"\n              ></b-form-datepicker>\n            </b-col>\n          </b-row>\n          <br />\n          <b-button\n            v-on:click=\"\n              loadCVReadings(\n                selectDeviceID,\n                firstSelectedDate,\n                secondSelectedDate\n              )\n            \"\n          >\n            View Readings\n          </b-button>\n        </b-card>\n      </b-col>\n      <b-col cols=\"3\"> </b-col>\n    </b-row>\n\n    <br />\n    <div\n      v-if=\"this.firstGraphReadings != null && this.secondGraphReadings != null\"\n    >\n      <b-row>\n        <b-col cols=\"2\"> </b-col>\n        <b-col cols=\"4\" class=\"main\">\n          <b-card class=\"graphCard\" v-if=\"this.firstGraphReadings == 'No Data'\">\n            <p>No data</p>\n          </b-card>\n          <b-card\n            class=\"graphCard\"\n            v-else-if=\"this.firstGraphGenerated == true\"\n          >\n            <b-row>\n              <b-col cols=\"2\">\n                <b-button\n                  v-on:click=\"firstGraphGenerated = false\"\n                  variant=\"info\"\n                  class=\"crossBadge\"\n                  pill\n                  >&#8592;</b-button\n                >\n              </b-col>\n              <b-col cols=\"10\">\n                <p>\n                  Reading Date: <b>{{ this.firstSelectedDate }}</b> | Reading\n                  Time:\n                  <b>{{ this.firstSelectedTime }}</b>\n                </p>\n              </b-col>\n            </b-row>\n            <ApexChart\n              width=\"100%\"\n              type=\"line\"\n              :options=\"chartOptions\"\n              :series=\"series1\"\n              :key=\"firstChartKey\"\n            ></ApexChart>\n          </b-card>\n          <b-card class=\"graphCard\" v-else>\n            <b-list-group class=\"overflow-auto list-group\">\n              <b-list-group-item\n                button\n                v-on:click=\"timeSelectedFirst(time)\"\n                v-for=\"time in this.formattedFirstDateReadings\"\n                :key=\"time.time\"\n                class=\"d-flex justify-content-between align-items-center\"\n              >\n                {{ time.time }} Reading\n                <b-badge variant=\"info\" v-if=\"time.selected == true\" pill\n                  >&#10003;</b-badge\n                >\n              </b-list-group-item>\n            </b-list-group>\n            <br />\n            <b-button variant=\"info\" v-on:click=\"generateFirstGraph()\"\n              >Generate Graph</b-button\n            >\n          </b-card>\n        </b-col>\n        <b-col cols=\"4\" class=\"main\">\n          <b-card\n            class=\"graphCard\"\n            v-if=\"this.secondGraphReadings == 'No Data'\"\n          >\n            <p>No data</p>\n          </b-card>\n          <b-card\n            class=\"graphCard\"\n            v-else-if=\"this.secondGraphGenerated == true\"\n          >\n            <b-row>\n              <b-col cols=\"2\">\n                <b-button\n                  v-on:click=\"secondGraphGenerated = false\"\n                  variant=\"info\"\n                  class=\"crossBadge\"\n                  pill\n                  >&#8592;</b-button\n                >\n              </b-col>\n              <b-col cols=\"10\">\n                <p>\n                  Reading Date: <b>{{ this.secondSelectedDate }}</b> | Reading\n                  Time:\n                  <b>{{ this.secondSelectedTime }}</b>\n                </p>\n              </b-col>\n            </b-row>\n            <ApexChart\n              width=\"100%\"\n              type=\"line\"\n              :options=\"chartOptions\"\n              :series=\"series2\"\n              :key=\"secondChartKey\"\n            ></ApexChart>\n          </b-card>\n          <b-card class=\"graphCard\" v-else>\n            <b-list-group class=\"overflow-auto list-group\">\n              <b-list-group-item\n                button\n                v-on:click=\"timeSelectedSecond(time)\"\n                v-for=\"time in this.formattedSecondDateReadings\"\n                :key=\"time.time\"\n                class=\"d-flex justify-content-between align-items-center\"\n              >\n                {{ time.time }} Reading\n                <b-badge variant=\"info\" v-if=\"time.selected == true\" pill\n                  >&#10003;</b-badge\n                >\n              </b-list-group-item>\n            </b-list-group>\n            <br />\n            <b-button variant=\"info\" v-on:click=\"generateSecondGraph()\"\n              >Generate Graph</b-button\n            >\n          </b-card>\n        </b-col>\n        <b-col cols=\"2\"> </b-col>\n      </b-row>\n    </div>\n  </b-container>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      firstChartKey: 0,\n      firstSelectedDate: \"\",\n      secondSelectedDate: \"\",\n      firstSelectedTime: \"\",\n      secondSelectedTime: \"\",\n      firstGraphGenerated: false,\n      secondGraphGenerated: false,\n      firstVoltageList: [],\n      firstCurrentList: [],\n      formattedFirstDateReadings: [],\n      formattedSecondDateReadings: [],\n      formattedFirstCv: [],\n      formattedSecondCv: [],\n      currentList: [],\n      voltageList: [],\n      firstGraphReadings: null,\n      secondGraphReadings: null,\n      selectDeviceID: \"Placeholder\",\n      activeDevices: [],\n      cvReading: [],\n      chartOptions: {\n        stroke: {\n          curve: \"smooth\",\n          width: \"1\",\n        },\n        chart: {\n          id: \"vuechart-example\",\n        },\n        xaxis: {\n          tickAmount: 7,\n        },\n      },\n      series1: [\n        {\n          name: \"first_cv_data\",\n          data: [],\n        },\n      ],\n      series2: [\n        {\n          name: \"second_cv_data\",\n          data: [],\n        },\n      ],\n    };\n  },\n  mounted() {\n    let lookUpUrlActiveDevices =\n      \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n    let lookUpHeadersActiveDevices = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\",\n      },\n    };\n    let lookUpRequestActiveDevices = {\n      RequestType: \"ActiveDevices\",\n      DataDict: [\n        {\n          DeviceID: \"\",\n          ReadingDate: \"\",\n        },\n      ],\n    };\n    axios\n      .post(\n        lookUpUrlActiveDevices,\n        lookUpRequestActiveDevices,\n        lookUpHeadersActiveDevices\n      )\n      .then((response) => {\n        this.activeDevices = [\n          { text: \"Please select a Device ID\", value: \"Placeholder\" },\n        ];\n        for (let i = 0; i < response.data.Values.length; i++) {\n          this.activeDevices.push({\n            text: response.data.Values[i],\n            value: response.data.Values[i],\n          });\n        }\n      });\n  },\n  methods: {\n    generateFirstGraph() {\n      console.log(\"Generating first graph\");\n      for (let i = 0; i < this.firstGraphReadings.length; i++) {\n        if (this.formattedFirstDateReadings[i].selected == true) {\n          this.firstSelectedTime = this.formattedFirstDateReadings[i].time;\n        }\n      }\n\n      let lookUpUrlFirstCVData =\n        \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n      let lookUpHeadersFirstCVData = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\",\n        },\n      };\n      let lookUpRequestFirstCVData = {\n        RequestType: \"LoadCVData\",\n        DataDict: [\n          {\n            DeviceID: this.selectDeviceID,\n            ReadingDate: this.firstSelectedDate,\n            ReadingTime: this.firstSelectedTime,\n          },\n        ],\n      };\n      axios\n        .post(\n          lookUpUrlFirstCVData,\n          lookUpRequestFirstCVData,\n          lookUpHeadersFirstCVData\n        )\n        .then((response) => {\n          console.log(response);\n          this.firstVoltageList = response.data.VoltageList;\n          this.firstCurrentList = response.data.CurrentList;\n          this.formatCV(this.firstVoltageList, this.firstCurrentList);\n          this.firstChartKey += 1;\n          this.firstGraphGenerated = true;\n          console.log(\"First Formatted\", this.formattedFirstCv);\n        });\n    },\n    generateSecondGraph() {\n      console.log(\"Generating second graph\");\n      for (let i = 0; i < this.secondGraphReadings.length; i++) {\n        if (this.formattedSecondDateReadings[i].selected == true) {\n          this.secondSelectedTime = this.formattedSecondDateReadings[i].time;\n        }\n      }\n\n      let lookUpUrlSecondCVData =\n        \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n      let lookUpHeadersSecondCVData = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\",\n        },\n      };\n      let lookUpRequestSecondCVData = {\n        RequestType: \"LoadCVData\",\n        DataDict: [\n          {\n            DeviceID: this.selectDeviceID,\n            ReadingDate: this.secondSelectedDate,\n            ReadingTime: this.secondSelectedTime,\n          },\n        ],\n      };\n      axios\n        .post(\n          lookUpUrlSecondCVData,\n          lookUpRequestSecondCVData,\n          lookUpHeadersSecondCVData\n        )\n        .then((response) => {\n          console.log(response);\n          this.secondVoltageList = response.data.VoltageList;\n          this.secondCurrentList = response.data.CurrentList;\n          this.formatCV2(this.secondVoltageList, this.secondCurrentList);\n          this.secondChartKey += 1;\n          this.secondGraphGenerated = true;\n          console.log(\"Second Formatted\", this.formattedSecondCv);\n        });\n    },\n    timeSelectedFirst(time) {\n      for (let i = 0; i < this.firstGraphReadings.length; i++) {\n        if (this.formattedFirstDateReadings[i].time == time.time) {\n          this.formattedFirstDateReadings[i].selected = true;\n        } else {\n          this.formattedFirstDateReadings[i].selected = false;\n        }\n      }\n    },\n    timeSelectedSecond(time) {\n      for (let i = 0; i < this.secondGraphReadings.length; i++) {\n        if (this.formattedSecondDateReadings[i].time == time.time) {\n          this.formattedSecondDateReadings[i].selected = true;\n        } else {\n          this.formattedSecondDateReadings[i].selected = false;\n        }\n      }\n    },\n    loadCVReadings(deviceID, firstDate, secondDate) {\n      console.log(deviceID, firstDate, secondDate);\n      let lookUpUrlCVReadings =\n        \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n      let lookUpHeadersCVReadings = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\",\n        },\n      };\n      let lookUpRequestCVReadings = {\n        RequestType: \"LoadCVReadingTimes\",\n        DataDict: [\n          {\n            DeviceID: deviceID,\n            FirstDate: firstDate,\n            SecondDate: secondDate,\n          },\n        ],\n      };\n      axios\n        .post(\n          lookUpUrlCVReadings,\n          lookUpRequestCVReadings,\n          lookUpHeadersCVReadings\n        )\n        .then((response) => {\n          this.formattedFirstDateReadings = [];\n          this.formattedSecondDateReadings = [];\n          this.firstGraphReadings = [];\n          this.secondGraphReadings = [];\n          if (response.data.FirstDateReadings.length == 0) {\n            this.firstGraphReadings = \"No Data\";\n          } else {\n            this.firstGraphReadings = response.data.FirstDateReadings;\n          }\n          if (response.data.SecondDateReadings.length == 0) {\n            this.secondGraphReadings = \"No Data\";\n          } else {\n            this.secondGraphReadings = response.data.SecondDateReadings;\n          }\n          if (this.firstGraphReadings != \"No Data\") {\n            for (let i = 0; i < this.firstGraphReadings.length; i++) {\n              this.formattedFirstDateReadings.push({\n                time: this.firstGraphReadings[i][0],\n                selected: false,\n              });\n            }\n          }\n          if (this.secondGraphReadings != \"No Data\") {\n            for (let i = 0; i < this.secondGraphReadings.length; i++) {\n              this.formattedSecondDateReadings.push({\n                time: this.secondGraphReadings[i][0],\n                selected: false,\n              });\n            }\n          }\n          console.log(this.formattedFirstDateReadings);\n          console.log(this.formattedSecondDateReadings);\n        });\n    },\n    formatCV(voltageList, currentList) {\n      this.voltageList = voltageList;\n      this.currentList = currentList;\n      this.formattedFirstCv = [];\n      for (let i = 0; i < this.voltageList.length; i++) {\n        this.formattedFirstCv.push({\n          x: this.voltageList[i],\n          y: this.currentList[i],\n        });\n      }\n      this.series1 = [\n        {\n          name: \"first_cv_data\",\n          data: this.formattedFirstCv,\n        },\n      ];\n    },\n    formatCV2(voltageList, currentList) {\n      console.log(\"Entered formatCV2\");\n      this.voltageList = voltageList;\n      this.currentList = currentList;\n      this.formattedSecondCv = [];\n      for (let i = 0; i < this.voltageList.length; i++) {\n        this.formattedSecondCv.push({\n          x: this.voltageList[i],\n          y: this.currentList[i],\n        });\n      }\n      this.series2 = [\n        {\n          name: \"second_cv_data\",\n          data: this.formattedSecondCv,\n        },\n      ];\n    },\n  },\n};\n</script>\n\n<style></style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}