{"ast":null,"code":"// import axios from \"axios\";\nimport \"bootstrap-vue\";\nimport VueHtml2pdf from \"vue-html2pdf\";\nexport default {\n  components: {\n    VueHtml2pdf\n  },\n  computed: {\n    htmlToPdfOptions() {\n      return {\n        margin: 2,\n        filename: \"\",\n        image: {\n          type: \"jpeg\",\n          quality: 0.98\n        },\n        // orientation: \"landscape\",\n\n        pagebreak: {\n          mode: \"avoid-all\",\n          after: \".avoidThisRow\"\n        }\n      };\n    }\n  },\n  data() {\n    return {\n      LayoutStyle: this.Orientation(),\n      PageBreak: {\n        mode: \"legacy\"\n      },\n      PageWidth: \"\"\n    };\n  },\n  mounted() {\n    this.$refs.html2pdf.generatePdf();\n  },\n  methods: {\n    Orientation() {\n      return \"Portrait\";\n    },\n    async beforeDownload({\n      html2pdf,\n      options,\n      pdfContent\n    }) {\n      await html2pdf().set(options).from(pdfContent).toPdf().get(\"pdf\").then(pdf => {\n        const totalPages = pdf.internal.getNumberOfPages();\n        for (let i = 1; i <= totalPages; i++) {\n          pdf.setPage(i);\n          pdf.setFontSize(10);\n          pdf.setTextColor(150);\n          pdf.text(\"Page \" + i + \" of \" + totalPages, pdf.internal.pageSize.getWidth() * 0.88, pdf.internal.pageSize.getHeight() - 0.3);\n        }\n      }).save();\n    },\n    generateReport() {}\n  }\n};","map":{"version":3,"names":["VueHtml2pdf","components","computed","htmlToPdfOptions","margin","filename","image","type","quality","pagebreak","mode","after","data","LayoutStyle","Orientation","PageBreak","PageWidth","mounted","$refs","html2pdf","generatePdf","methods","beforeDownload","options","pdfContent","set","from","toPdf","get","then","pdf","totalPages","internal","getNumberOfPages","i","setPage","setFontSize","setTextColor","text","pageSize","getWidth","getHeight","save","generateReport"],"sources":["src/components/PDFComponent.vue"],"sourcesContent":["<template>\n  <div class=\"\">\n    <vue-html2pdf\n      :show-layout=\"false\"\n      :float-layout=\"false\"\n      :enable-download=\"false\"\n      :preview-modal=\"true\"\n      :paginate-elements-by-height=\"1400\"\n      filename=\"yes\"\n      :pdf-quality=\"2\"\n      :manual-pagination=\"true\"\n      pdf-format=\"a4\"\n      :pdf-content-width=\"PageWidth\"\n      :pagebreak=\"PageBreak\"\n      :pdf-orientation=\"LayoutStyle\"\n      @progress=\"onProgress($event)\"\n      @hasStartedGeneration=\"hasStartedGeneration()\"\n      @hasGenerated=\"hasGenerated($event)\"\n      ref=\"html2pdf\"\n    >\n      <section slot=\"pdf-content\">\n        <div id=\"PDFContainer\">\n          <section style=\"margin-left: 1rem; text-align: center\">\n            <p>Test</p>\n          </section>\n        </div>\n      </section>\n    </vue-html2pdf>\n  </div>\n</template>\n<script>\n// import axios from \"axios\";\nimport {} from \"bootstrap-vue\";\nimport VueHtml2pdf from \"vue-html2pdf\";\n\nexport default {\n  components: {\n    VueHtml2pdf,\n  },\n  computed: {\n    htmlToPdfOptions() {\n      return {\n        margin: 2,\n        filename: \"\",\n        image: {\n          type: \"jpeg\",\n          quality: 0.98,\n        },\n        // orientation: \"landscape\",\n\n        pagebreak: { mode: \"avoid-all\", after: \".avoidThisRow\" },\n      };\n    },\n  },\n  data() {\n    return {\n      LayoutStyle: this.Orientation(),\n      PageBreak: {\n        mode: \"legacy\",\n      },\n      PageWidth: \"\",\n    };\n  },\n  mounted() {\n    this.$refs.html2pdf.generatePdf();\n  },\n  methods: {\n    Orientation() {\n      return \"Portrait\";\n    },\n\n    async beforeDownload({ html2pdf, options, pdfContent }) {\n      await html2pdf()\n        .set(options)\n        .from(pdfContent)\n        .toPdf()\n        .get(\"pdf\")\n        .then((pdf) => {\n          const totalPages = pdf.internal.getNumberOfPages();\n          for (let i = 1; i <= totalPages; i++) {\n            pdf.setPage(i);\n            pdf.setFontSize(10);\n            pdf.setTextColor(150);\n            pdf.text(\n              \"Page \" + i + \" of \" + totalPages,\n              pdf.internal.pageSize.getWidth() * 0.88,\n              pdf.internal.pageSize.getHeight() - 0.3\n            );\n          }\n        })\n        .save();\n    },\n    generateReport() {},\n  },\n};\n</script>\n<style></style>\n"],"mappings":"AA+BA;AACA;AACA,OAAAA,WAAA;AAEA;EACAC,UAAA;IACAD;EACA;EACAE,QAAA;IACAC,iBAAA;MACA;QACAC,MAAA;QACAC,QAAA;QACAC,KAAA;UACAC,IAAA;UACAC,OAAA;QACA;QACA;;QAEAC,SAAA;UAAAC,IAAA;UAAAC,KAAA;QAAA;MACA;IACA;EACA;EACAC,KAAA;IACA;MACAC,WAAA,OAAAC,WAAA;MACAC,SAAA;QACAL,IAAA;MACA;MACAM,SAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,KAAA,CAAAC,QAAA,CAAAC,WAAA;EACA;EACAC,OAAA;IACAP,YAAA;MACA;IACA;IAEA,MAAAQ,eAAA;MAAAH,QAAA;MAAAI,OAAA;MAAAC;IAAA;MACA,MAAAL,QAAA,GACAM,GAAA,CAAAF,OAAA,EACAG,IAAA,CAAAF,UAAA,EACAG,KAAA,GACAC,GAAA,QACAC,IAAA,CAAAC,GAAA;QACA,MAAAC,UAAA,GAAAD,GAAA,CAAAE,QAAA,CAAAC,gBAAA;QACA,SAAAC,CAAA,MAAAA,CAAA,IAAAH,UAAA,EAAAG,CAAA;UACAJ,GAAA,CAAAK,OAAA,CAAAD,CAAA;UACAJ,GAAA,CAAAM,WAAA;UACAN,GAAA,CAAAO,YAAA;UACAP,GAAA,CAAAQ,IAAA,CACA,UAAAJ,CAAA,YAAAH,UAAA,EACAD,GAAA,CAAAE,QAAA,CAAAO,QAAA,CAAAC,QAAA,WACAV,GAAA,CAAAE,QAAA,CAAAO,QAAA,CAAAE,SAAA,QACA;QACA;MACA,GACAC,IAAA;IACA;IACAC,eAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}