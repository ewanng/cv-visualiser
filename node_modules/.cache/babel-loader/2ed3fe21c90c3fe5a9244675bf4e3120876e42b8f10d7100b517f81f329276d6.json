{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      deviceDateMin: \"\",\n      deviceDateMax: \"\",\n      deviceReadingDates: [],\n      firstChartKey: 0,\n      firstSelectedDate: \"\",\n      secondSelectedDate: \"\",\n      firstSelectedTime: \"\",\n      secondSelectedTime: \"\",\n      firstGraphGenerated: false,\n      secondGraphGenerated: false,\n      firstVoltageList: [],\n      firstCurrentList: [],\n      formattedFirstDateReadings: [],\n      formattedSecondDateReadings: [],\n      formattedFirstCv: [],\n      formattedSecondCv: [],\n      currentList: [],\n      voltageList: [],\n      firstGraphReadings: null,\n      secondGraphReadings: null,\n      selectDeviceID: \"Placeholder\",\n      activeDevices: [],\n      chartOptions: {\n        stroke: {\n          curve: \"smooth\",\n          width: \"1\"\n        },\n        chart: {\n          id: \"vuechart-example\"\n        },\n        xaxis: {\n          tickAmount: 7\n        }\n      },\n      series1: [{\n        name: \"first_cv_data\",\n        data: []\n      }],\n      series2: [{\n        name: \"second_cv_data\",\n        data: []\n      }]\n    };\n  },\n  mounted() {\n    let lookUpUrlActiveDevices = \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n    let lookUpHeadersActiveDevices = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\"\n      }\n    };\n    let lookUpRequestActiveDevices = {\n      RequestType: \"ActiveDevices\",\n      DataDict: [{\n        DeviceID: \"\",\n        ReadingDate: \"\"\n      }]\n    };\n    axios.post(lookUpUrlActiveDevices, lookUpRequestActiveDevices, lookUpHeadersActiveDevices).then(response => {\n      this.activeDevices = [{\n        text: \"Please select a Device ID\",\n        value: \"Placeholder\"\n      }];\n      for (let i = 0; i < response.data.Values.length; i++) {\n        this.activeDevices.push({\n          text: response.data.Values[i],\n          value: response.data.Values[i]\n        });\n      }\n    });\n  },\n  methods: {\n    dateDisabled(ymd) {\n      console.log(ymd);\n      return ymd === \"2023-04-18\";\n    },\n    loadDeviceDates(device_id) {\n      console.log(device_id);\n      let lookUpUrlDeviceDates = \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n      let lookUpHeadersDeviceDates = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\"\n        }\n      };\n      let lookUpRequestDeviceDates = {\n        RequestType: \"LoadDeviceDates\",\n        DataDict: [{\n          DeviceID: device_id\n        }]\n      };\n      axios.post(lookUpUrlDeviceDates, lookUpRequestDeviceDates, lookUpHeadersDeviceDates).then(response => {\n        this.deviceDateMin = response.data.Values[0][0];\n        this.deviceDateMax = response.data.Values[0][1];\n        this.deviceReadingDates = response.data.ReadingDates;\n      });\n    },\n    generateFirstGraph() {\n      console.log(\"Generating first graph\");\n      for (let i = 0; i < this.firstGraphReadings.length; i++) {\n        if (this.formattedFirstDateReadings[i].selected == true) {\n          this.firstSelectedTime = this.formattedFirstDateReadings[i].time;\n        }\n      }\n      let lookUpUrlFirstCVData = \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n      let lookUpHeadersFirstCVData = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\"\n        }\n      };\n      let lookUpRequestFirstCVData = {\n        RequestType: \"LoadCVData\",\n        DataDict: [{\n          DeviceID: this.selectDeviceID,\n          ReadingDate: this.firstSelectedDate,\n          ReadingTime: this.firstSelectedTime\n        }]\n      };\n      axios.post(lookUpUrlFirstCVData, lookUpRequestFirstCVData, lookUpHeadersFirstCVData).then(response => {\n        console.log(lookUpRequestFirstCVData);\n        console.log(response);\n        this.firstVoltageList = response.data.VoltageList;\n        this.firstCurrentList = response.data.CurrentList;\n        this.formatCV(this.firstVoltageList, this.firstCurrentList);\n        this.firstChartKey += 1;\n        this.firstGraphGenerated = true;\n        console.log(\"First Formatted\", this.formattedFirstCv);\n      });\n    },\n    generateSecondGraph() {\n      console.log(\"Generating second graph\");\n      for (let i = 0; i < this.secondGraphReadings.length; i++) {\n        if (this.formattedSecondDateReadings[i].selected == true) {\n          this.secondSelectedTime = this.formattedSecondDateReadings[i].time;\n        }\n      }\n      let lookUpUrlSecondCVData = \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n      let lookUpHeadersSecondCVData = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\"\n        }\n      };\n      let lookUpRequestSecondCVData = {\n        RequestType: \"LoadCVData\",\n        DataDict: [{\n          DeviceID: this.selectDeviceID,\n          ReadingDate: this.secondSelectedDate,\n          ReadingTime: this.secondSelectedTime\n        }]\n      };\n      axios.post(lookUpUrlSecondCVData, lookUpRequestSecondCVData, lookUpHeadersSecondCVData).then(response => {\n        console.log(response);\n        this.secondVoltageList = response.data.VoltageList;\n        this.secondCurrentList = response.data.CurrentList;\n        this.formatCV2(this.secondVoltageList, this.secondCurrentList);\n        this.secondChartKey += 1;\n        this.secondGraphGenerated = true;\n        console.log(\"Second Formatted\", this.formattedSecondCv);\n      });\n    },\n    timeSelectedFirst(time) {\n      for (let i = 0; i < this.firstGraphReadings.length; i++) {\n        if (this.formattedFirstDateReadings[i].time == time.time) {\n          this.formattedFirstDateReadings[i].selected = true;\n        } else {\n          this.formattedFirstDateReadings[i].selected = false;\n        }\n      }\n    },\n    timeSelectedSecond(time) {\n      for (let i = 0; i < this.secondGraphReadings.length; i++) {\n        if (this.formattedSecondDateReadings[i].time == time.time) {\n          this.formattedSecondDateReadings[i].selected = true;\n        } else {\n          this.formattedSecondDateReadings[i].selected = false;\n        }\n      }\n    },\n    resetSelection() {\n      this.firstSelectedDate = \"\", this.secondSelectedDate = \"\", this.firstSelectedTime = \"\", this.secondSelectedTime = \"\", this.firstGraphGenerated = false, this.secondGraphGenerated = false, this.firstVoltageList = [], this.firstCurrentList = [], this.formattedFirstDateReadings = [], this.formattedSecondDateReadings = [], this.formattedFirstCv = [], this.formattedSecondCv = [], this.currentList = [], this.voltageList = [], this.firstGraphReadings = null, this.secondGraphReadings = null, this.selectDeviceID = \"Placeholder\", this.deviceDateMin = \"\", this.deviceDateMax = \"\";\n    },\n    loadCVReadings(deviceID, firstDate, secondDate) {\n      console.log(deviceID, firstDate, secondDate);\n      let lookUpUrlCVReadings = \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n      let lookUpHeadersCVReadings = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\"\n        }\n      };\n      let lookUpRequestCVReadings = {\n        RequestType: \"LoadCVReadingTimes\",\n        DataDict: [{\n          DeviceID: deviceID,\n          FirstDate: firstDate,\n          SecondDate: secondDate\n        }]\n      };\n      axios.post(lookUpUrlCVReadings, lookUpRequestCVReadings, lookUpHeadersCVReadings).then(response => {\n        this.formattedFirstDateReadings = [];\n        this.formattedSecondDateReadings = [];\n        this.firstGraphReadings = [];\n        this.secondGraphReadings = [];\n        if (response.data.FirstDateReadings.length == 0) {\n          this.firstGraphReadings = \"No Data\";\n        } else {\n          this.firstGraphReadings = response.data.FirstDateReadings;\n        }\n        if (response.data.SecondDateReadings.length == 0) {\n          this.secondGraphReadings = \"No Data\";\n        } else {\n          this.secondGraphReadings = response.data.SecondDateReadings;\n        }\n        if (this.firstGraphReadings != \"No Data\") {\n          for (let i = 0; i < this.firstGraphReadings.length; i++) {\n            this.formattedFirstDateReadings.push({\n              time: this.firstGraphReadings[i][0],\n              selected: false\n            });\n          }\n        }\n        if (this.secondGraphReadings != \"No Data\") {\n          for (let i = 0; i < this.secondGraphReadings.length; i++) {\n            this.formattedSecondDateReadings.push({\n              time: this.secondGraphReadings[i][0],\n              selected: false\n            });\n          }\n        }\n        this.firstGraphGenerated = false;\n        this.secondGraphGenerated = false;\n        console.log(this.formattedFirstDateReadings);\n        console.log(this.formattedSecondDateReadings);\n      });\n    },\n    formatCV(voltageList, currentList) {\n      this.voltageList = voltageList;\n      this.currentList = currentList;\n      this.formattedFirstCv = [];\n      for (let i = 0; i < this.voltageList.length; i++) {\n        this.formattedFirstCv.push({\n          x: this.voltageList[i],\n          y: this.currentList[i]\n        });\n      }\n      this.series1 = [{\n        name: \"first_cv_data\",\n        data: this.formattedFirstCv\n      }];\n    },\n    formatCV2(voltageList, currentList) {\n      console.log(\"Entered formatCV2\");\n      this.voltageList = voltageList;\n      this.currentList = currentList;\n      this.formattedSecondCv = [];\n      for (let i = 0; i < this.voltageList.length; i++) {\n        this.formattedSecondCv.push({\n          x: this.voltageList[i],\n          y: this.currentList[i]\n        });\n      }\n      this.series2 = [{\n        name: \"second_cv_data\",\n        data: this.formattedSecondCv\n      }];\n    }\n  }\n};","map":{"version":3,"names":["axios","data","deviceDateMin","deviceDateMax","deviceReadingDates","firstChartKey","firstSelectedDate","secondSelectedDate","firstSelectedTime","secondSelectedTime","firstGraphGenerated","secondGraphGenerated","firstVoltageList","firstCurrentList","formattedFirstDateReadings","formattedSecondDateReadings","formattedFirstCv","formattedSecondCv","currentList","voltageList","firstGraphReadings","secondGraphReadings","selectDeviceID","activeDevices","chartOptions","stroke","curve","width","chart","id","xaxis","tickAmount","series1","name","series2","mounted","lookUpUrlActiveDevices","lookUpHeadersActiveDevices","headers","lookUpRequestActiveDevices","RequestType","DataDict","DeviceID","ReadingDate","post","then","response","text","value","i","Values","length","push","methods","dateDisabled","ymd","console","log","loadDeviceDates","device_id","lookUpUrlDeviceDates","lookUpHeadersDeviceDates","lookUpRequestDeviceDates","ReadingDates","generateFirstGraph","selected","time","lookUpUrlFirstCVData","lookUpHeadersFirstCVData","lookUpRequestFirstCVData","ReadingTime","VoltageList","CurrentList","formatCV","generateSecondGraph","lookUpUrlSecondCVData","lookUpHeadersSecondCVData","lookUpRequestSecondCVData","secondVoltageList","secondCurrentList","formatCV2","secondChartKey","timeSelectedFirst","timeSelectedSecond","resetSelection","loadCVReadings","deviceID","firstDate","secondDate","lookUpUrlCVReadings","lookUpHeadersCVReadings","lookUpRequestCVReadings","FirstDate","SecondDate","FirstDateReadings","SecondDateReadings","x","y"],"sources":["src/components/MainComponent.vue"],"sourcesContent":["<template>\n  <b-container fluid>\n    <br />\n    <b-row>\n      <b-col cols=\"2\"></b-col>\n      <b-col cols=\"8\">\n        <b-card bg-variant=\"light\">\n          <b-row>\n            <b-col cols=\"4\">\n              <p class=\"mx-auto\">Select Device ID:</p>\n              <b-form-select\n                class=\"mx-3\"\n                v-model=\"selectDeviceID\"\n                :options=\"activeDevices\"\n                @change=\"loadDeviceDates(selectDeviceID)\"\n              ></b-form-select>\n            </b-col>\n            <b-col cols=\"4\"\n              ><p>Select First Graph Date:</p>\n              <b-form-datepicker\n                v-model=\"firstSelectedDate\"\n                locale=\"en\"\n                :min=\"deviceDateMin\"\n                :max=\"deviceDateMax\"\n                :date-disabled-fn=\"dateDisabled\"\n              ></b-form-datepicker\n            ></b-col>\n            <b-col cols=\"4\"\n              ><p>Select Second Graph Date:</p>\n              <b-form-datepicker\n                v-model=\"secondSelectedDate\"\n                locale=\"en\"\n                :min=\"deviceDateMin\"\n                :max=\"deviceDateMax\"\n              ></b-form-datepicker\n            ></b-col>\n          </b-row>\n          <br />\n          <b-row>\n            <b-button\n              class=\"m-1 ml-auto\"\n              variant=\"info\"\n              v-on:click=\"\n                loadCVReadings(\n                  selectDeviceID,\n                  firstSelectedDate,\n                  secondSelectedDate\n                )\n              \"\n            >\n              View Readings\n            </b-button>\n            <b-button\n              class=\"m-1 mr-auto\"\n              variant=\"secondary\"\n              v-on:click=\"resetSelection()\"\n            >\n              Reset\n            </b-button>\n          </b-row>\n        </b-card>\n      </b-col>\n    </b-row>\n\n    <br />\n    <div\n      v-if=\"this.firstGraphReadings != null && this.secondGraphReadings != null\"\n    >\n      <b-row>\n        <b-col cols=\"2\"> </b-col>\n        <b-col cols=\"4\" class=\"main\">\n          <b-card\n            class=\"graphCard mx\"\n            v-if=\"this.firstGraphReadings == 'No Data'\"\n          >\n            <p>No data available - Please select another date.</p>\n          </b-card>\n          <b-card class=\"graphCard\" v-if=\"this.firstGraphGenerated == true\">\n            <b-row>\n              <b-col cols=\"10\">\n                <p>\n                  Reading Time:\n                  <b>{{ this.firstSelectedTime }}</b>\n                </p>\n              </b-col>\n              <b-col cols=\"2\">\n                <b-button\n                  v-on:click=\"firstGraphGenerated = false\"\n                  variant=\"light\"\n                  class=\"backButton ml-0\"\n                  pill\n                  size=\"sm\"\n                >\n                  <b-icon scale=\"0.7\" icon=\"x-lg\"></b-icon\n                ></b-button>\n              </b-col>\n            </b-row>\n            <ApexChart\n              width=\"100%\"\n              type=\"line\"\n              :options=\"chartOptions\"\n              :series=\"series1\"\n              :key=\"firstChartKey\"\n            ></ApexChart>\n            <template #footer\n              ><b-button\n                class=\"m-1 ml-auto\"\n                variant=\"info\"\n                v-b-modal.data-modal1\n                >View Data</b-button\n              >\n              <b-modal id=\"data-modal1\" scrollable title=\"First Graph CV Data\">\n                <b>Voltage List</b>\n                <hr />\n                <p>{{ firstVoltageList }}</p>\n                <b>Current List</b>\n                <hr />\n                <p>{{ firstCurrentList }}</p>\n              </b-modal></template\n            >\n          </b-card>\n          <b-card\n            class=\"graphCard\"\n            v-if=\"\n              this.firstGraphReadings != 'No Data' &&\n              this.firstGraphGenerated == false\n            \"\n          >\n            <template #footer\n              ><b-button variant=\"info\" v-on:click=\"generateFirstGraph()\"\n                >Generate Graph</b-button\n              ></template\n            >\n            <b-list-group class=\"overflow-auto list-group\">\n              <b-list-group-item\n                button\n                v-on:click=\"timeSelectedFirst(time)\"\n                v-for=\"time in this.formattedFirstDateReadings\"\n                :key=\"time.time\"\n                class=\"d-flex justify-content-between align-items-center\"\n              >\n                {{ time.time }} Reading\n                <b-badge variant=\"info\" v-if=\"time.selected == true\" pill\n                  >&#10003;</b-badge\n                >\n              </b-list-group-item>\n            </b-list-group>\n            <br />\n          </b-card>\n        </b-col>\n        <b-col cols=\"4\" class=\"main\">\n          <b-card\n            class=\"graphCard\"\n            v-if=\"this.secondGraphReadings == 'No Data'\"\n          >\n            <p>No data available - Please select another date.</p>\n          </b-card>\n          <b-card class=\"graphCard\" v-if=\"this.secondGraphGenerated == true\">\n            <b-row>\n              <b-col cols=\"10\">\n                <p>\n                  Reading Time:\n                  <b>{{ this.secondSelectedTime }}</b>\n                </p>\n              </b-col>\n              <b-col cols=\"2\" class=\"noMarg\">\n                <b-button\n                  v-on:click=\"secondGraphGenerated = false\"\n                  variant=\"light\"\n                  class=\"backButton ml-0\"\n                  pill\n                  size=\"sm\"\n                >\n                  <b-icon scale=\"0.7\" icon=\"x-lg\"></b-icon\n                ></b-button>\n              </b-col>\n            </b-row>\n            <ApexChart\n              width=\"100%\"\n              type=\"line\"\n              :options=\"chartOptions\"\n              :series=\"series2\"\n              :key=\"secondChartKey\"\n            ></ApexChart>\n            <template #footer\n              ><b-button\n                class=\"m-1 ml-auto\"\n                variant=\"info\"\n                v-b-modal.data-modal2\n                >View Data</b-button\n              >\n              <b-modal id=\"data-modal2\" scrollable title=\"Second Graph CV Data\">\n                <b>Voltage List</b>\n                <hr />\n                <p>{{ secondVoltageList }}</p>\n                <b>Current List</b>\n                <hr />\n                <p>{{ secondCurrentList }}</p>\n              </b-modal></template\n            >\n          </b-card>\n          <b-card\n            class=\"graphCard\"\n            v-if=\"\n              this.secondGraphReadings != 'No Data' &&\n              this.secondGraphGenerated == false\n            \"\n          >\n            <template #footer\n              ><b-button variant=\"info\" v-on:click=\"generateSecondGraph()\"\n                >Generate Graph</b-button\n              ></template\n            >\n            <b-list-group class=\"overflow-auto list-group\">\n              <b-list-group-item\n                button\n                v-on:click=\"timeSelectedSecond(time)\"\n                v-for=\"time in this.formattedSecondDateReadings\"\n                :key=\"time.time\"\n                class=\"d-flex justify-content-between align-items-center\"\n              >\n                {{ time.time }} Reading\n                <b-badge variant=\"info\" v-if=\"time.selected == true\" pill\n                  >&#10003;</b-badge\n                >\n              </b-list-group-item>\n            </b-list-group>\n            <br />\n          </b-card>\n        </b-col>\n        <b-col cols=\"2\"> </b-col>\n      </b-row>\n    </div>\n  </b-container>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      deviceDateMin: \"\",\n      deviceDateMax: \"\",\n      deviceReadingDates: [],\n      firstChartKey: 0,\n      firstSelectedDate: \"\",\n      secondSelectedDate: \"\",\n      firstSelectedTime: \"\",\n      secondSelectedTime: \"\",\n      firstGraphGenerated: false,\n      secondGraphGenerated: false,\n      firstVoltageList: [],\n      firstCurrentList: [],\n      formattedFirstDateReadings: [],\n      formattedSecondDateReadings: [],\n      formattedFirstCv: [],\n      formattedSecondCv: [],\n      currentList: [],\n      voltageList: [],\n      firstGraphReadings: null,\n      secondGraphReadings: null,\n      selectDeviceID: \"Placeholder\",\n      activeDevices: [],\n      chartOptions: {\n        stroke: {\n          curve: \"smooth\",\n          width: \"1\",\n        },\n        chart: {\n          id: \"vuechart-example\",\n        },\n        xaxis: {\n          tickAmount: 7,\n        },\n      },\n      series1: [\n        {\n          name: \"first_cv_data\",\n          data: [],\n        },\n      ],\n      series2: [\n        {\n          name: \"second_cv_data\",\n          data: [],\n        },\n      ],\n    };\n  },\n  mounted() {\n    let lookUpUrlActiveDevices =\n      \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n    let lookUpHeadersActiveDevices = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\",\n      },\n    };\n    let lookUpRequestActiveDevices = {\n      RequestType: \"ActiveDevices\",\n      DataDict: [\n        {\n          DeviceID: \"\",\n          ReadingDate: \"\",\n        },\n      ],\n    };\n    axios\n      .post(\n        lookUpUrlActiveDevices,\n        lookUpRequestActiveDevices,\n        lookUpHeadersActiveDevices\n      )\n      .then((response) => {\n        this.activeDevices = [\n          { text: \"Please select a Device ID\", value: \"Placeholder\" },\n        ];\n        for (let i = 0; i < response.data.Values.length; i++) {\n          this.activeDevices.push({\n            text: response.data.Values[i],\n            value: response.data.Values[i],\n          });\n        }\n      });\n  },\n  methods: {\n    dateDisabled(ymd) {\n      console.log(ymd);\n      return ymd === \"2023-04-18\";\n    },\n    loadDeviceDates(device_id) {\n      console.log(device_id);\n      let lookUpUrlDeviceDates =\n        \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n      let lookUpHeadersDeviceDates = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\",\n        },\n      };\n      let lookUpRequestDeviceDates = {\n        RequestType: \"LoadDeviceDates\",\n        DataDict: [\n          {\n            DeviceID: device_id,\n          },\n        ],\n      };\n      axios\n        .post(\n          lookUpUrlDeviceDates,\n          lookUpRequestDeviceDates,\n          lookUpHeadersDeviceDates\n        )\n        .then((response) => {\n          this.deviceDateMin = response.data.Values[0][0];\n          this.deviceDateMax = response.data.Values[0][1];\n          this.deviceReadingDates = response.data.ReadingDates;\n        });\n    },\n    generateFirstGraph() {\n      console.log(\"Generating first graph\");\n      for (let i = 0; i < this.firstGraphReadings.length; i++) {\n        if (this.formattedFirstDateReadings[i].selected == true) {\n          this.firstSelectedTime = this.formattedFirstDateReadings[i].time;\n        }\n      }\n\n      let lookUpUrlFirstCVData =\n        \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n      let lookUpHeadersFirstCVData = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\",\n        },\n      };\n      let lookUpRequestFirstCVData = {\n        RequestType: \"LoadCVData\",\n        DataDict: [\n          {\n            DeviceID: this.selectDeviceID,\n            ReadingDate: this.firstSelectedDate,\n            ReadingTime: this.firstSelectedTime,\n          },\n        ],\n      };\n      axios\n        .post(\n          lookUpUrlFirstCVData,\n          lookUpRequestFirstCVData,\n          lookUpHeadersFirstCVData\n        )\n        .then((response) => {\n          console.log(lookUpRequestFirstCVData);\n          console.log(response);\n          this.firstVoltageList = response.data.VoltageList;\n          this.firstCurrentList = response.data.CurrentList;\n          this.formatCV(this.firstVoltageList, this.firstCurrentList);\n          this.firstChartKey += 1;\n          this.firstGraphGenerated = true;\n          console.log(\"First Formatted\", this.formattedFirstCv);\n        });\n    },\n    generateSecondGraph() {\n      console.log(\"Generating second graph\");\n      for (let i = 0; i < this.secondGraphReadings.length; i++) {\n        if (this.formattedSecondDateReadings[i].selected == true) {\n          this.secondSelectedTime = this.formattedSecondDateReadings[i].time;\n        }\n      }\n\n      let lookUpUrlSecondCVData =\n        \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n      let lookUpHeadersSecondCVData = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\",\n        },\n      };\n      let lookUpRequestSecondCVData = {\n        RequestType: \"LoadCVData\",\n        DataDict: [\n          {\n            DeviceID: this.selectDeviceID,\n            ReadingDate: this.secondSelectedDate,\n            ReadingTime: this.secondSelectedTime,\n          },\n        ],\n      };\n      axios\n        .post(\n          lookUpUrlSecondCVData,\n          lookUpRequestSecondCVData,\n          lookUpHeadersSecondCVData\n        )\n        .then((response) => {\n          console.log(response);\n          this.secondVoltageList = response.data.VoltageList;\n          this.secondCurrentList = response.data.CurrentList;\n          this.formatCV2(this.secondVoltageList, this.secondCurrentList);\n          this.secondChartKey += 1;\n          this.secondGraphGenerated = true;\n          console.log(\"Second Formatted\", this.formattedSecondCv);\n        });\n    },\n    timeSelectedFirst(time) {\n      for (let i = 0; i < this.firstGraphReadings.length; i++) {\n        if (this.formattedFirstDateReadings[i].time == time.time) {\n          this.formattedFirstDateReadings[i].selected = true;\n        } else {\n          this.formattedFirstDateReadings[i].selected = false;\n        }\n      }\n    },\n    timeSelectedSecond(time) {\n      for (let i = 0; i < this.secondGraphReadings.length; i++) {\n        if (this.formattedSecondDateReadings[i].time == time.time) {\n          this.formattedSecondDateReadings[i].selected = true;\n        } else {\n          this.formattedSecondDateReadings[i].selected = false;\n        }\n      }\n    },\n    resetSelection() {\n      (this.firstSelectedDate = \"\"),\n        (this.secondSelectedDate = \"\"),\n        (this.firstSelectedTime = \"\"),\n        (this.secondSelectedTime = \"\"),\n        (this.firstGraphGenerated = false),\n        (this.secondGraphGenerated = false),\n        (this.firstVoltageList = []),\n        (this.firstCurrentList = []),\n        (this.formattedFirstDateReadings = []),\n        (this.formattedSecondDateReadings = []),\n        (this.formattedFirstCv = []),\n        (this.formattedSecondCv = []),\n        (this.currentList = []),\n        (this.voltageList = []),\n        (this.firstGraphReadings = null),\n        (this.secondGraphReadings = null),\n        (this.selectDeviceID = \"Placeholder\"),\n        (this.deviceDateMin = \"\"),\n        (this.deviceDateMax = \"\");\n    },\n    loadCVReadings(deviceID, firstDate, secondDate) {\n      console.log(deviceID, firstDate, secondDate);\n      let lookUpUrlCVReadings =\n        \"https://z4gvpjhmk4.execute-api.eu-west-2.amazonaws.com/DEV/visualiser\";\n      let lookUpHeadersCVReadings = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"WEqEfodYfW3cSpQ99TGlD3pJFCbB0KAG6byvLEpm\",\n        },\n      };\n      let lookUpRequestCVReadings = {\n        RequestType: \"LoadCVReadingTimes\",\n        DataDict: [\n          {\n            DeviceID: deviceID,\n            FirstDate: firstDate,\n            SecondDate: secondDate,\n          },\n        ],\n      };\n      axios\n        .post(\n          lookUpUrlCVReadings,\n          lookUpRequestCVReadings,\n          lookUpHeadersCVReadings\n        )\n        .then((response) => {\n          this.formattedFirstDateReadings = [];\n          this.formattedSecondDateReadings = [];\n          this.firstGraphReadings = [];\n          this.secondGraphReadings = [];\n          if (response.data.FirstDateReadings.length == 0) {\n            this.firstGraphReadings = \"No Data\";\n          } else {\n            this.firstGraphReadings = response.data.FirstDateReadings;\n          }\n          if (response.data.SecondDateReadings.length == 0) {\n            this.secondGraphReadings = \"No Data\";\n          } else {\n            this.secondGraphReadings = response.data.SecondDateReadings;\n          }\n          if (this.firstGraphReadings != \"No Data\") {\n            for (let i = 0; i < this.firstGraphReadings.length; i++) {\n              this.formattedFirstDateReadings.push({\n                time: this.firstGraphReadings[i][0],\n                selected: false,\n              });\n            }\n          }\n          if (this.secondGraphReadings != \"No Data\") {\n            for (let i = 0; i < this.secondGraphReadings.length; i++) {\n              this.formattedSecondDateReadings.push({\n                time: this.secondGraphReadings[i][0],\n                selected: false,\n              });\n            }\n          }\n          this.firstGraphGenerated = false;\n          this.secondGraphGenerated = false;\n          console.log(this.formattedFirstDateReadings);\n          console.log(this.formattedSecondDateReadings);\n        });\n    },\n    formatCV(voltageList, currentList) {\n      this.voltageList = voltageList;\n      this.currentList = currentList;\n      this.formattedFirstCv = [];\n      for (let i = 0; i < this.voltageList.length; i++) {\n        this.formattedFirstCv.push({\n          x: this.voltageList[i],\n          y: this.currentList[i],\n        });\n      }\n      this.series1 = [\n        {\n          name: \"first_cv_data\",\n          data: this.formattedFirstCv,\n        },\n      ];\n    },\n    formatCV2(voltageList, currentList) {\n      console.log(\"Entered formatCV2\");\n      this.voltageList = voltageList;\n      this.currentList = currentList;\n      this.formattedSecondCv = [];\n      for (let i = 0; i < this.voltageList.length; i++) {\n        this.formattedSecondCv.push({\n          x: this.voltageList[i],\n          y: this.currentList[i],\n        });\n      }\n      this.series2 = [\n        {\n          name: \"second_cv_data\",\n          data: this.formattedSecondCv,\n        },\n      ];\n    },\n  },\n};\n</script>\n\n<style></style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}