{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      hideFooter: true,\n      deviceDateMin: \"\",\n      deviceDateMax: \"\",\n      firstChartKey: 0,\n      secondChartKey: 0,\n      firstSelectedDate: \"\",\n      secondSelectedDate: \"\",\n      firstSelectedTime: \"\",\n      secondSelectedTime: \"\",\n      firstGraphGenerated: false,\n      secondGraphGenerated: false,\n      firstVoltageList: [],\n      firstCurrentList: [],\n      formattedFirstDateReadings: [],\n      formattedSecondDateReadings: [],\n      formattedFirstCv: [],\n      formattedSecondCv: [],\n      currentList: [],\n      voltageList: [],\n      firstGraphReadings: null,\n      secondGraphReadings: null,\n      selectDeviceID: \"Placeholder\",\n      selectedComparison: \"Side by Side\",\n      selectedGraphType: \"Individual\",\n      activeDevices: [],\n      compOptions: [{\n        text: \"Side by Side\",\n        value: \"Side by Side\"\n      }, {\n        text: \"Overlapped\",\n        value: \"Overlapped\"\n      }],\n      typeOptions: [{\n        text: \"Individual\",\n        value: \"Individual\"\n      }, {\n        text: \"Comparison\",\n        value: \"Comparison\"\n      }],\n      chartOptions: {\n        stroke: {\n          curve: \"smooth\",\n          width: \"1\"\n        },\n        chart: {\n          id: \"CV-Chart\"\n        },\n        xaxis: {\n          type: \"numeric\",\n          tickAmount: 5,\n          decimalsInFloat: 1\n        }\n      },\n      series1: [{\n        name: \"first_cv_data\",\n        data: []\n      }],\n      series2: [{\n        name: \"second_cv_data\",\n        data: []\n      }],\n      overlappedSeries: [{\n        name: \"first_cv_data\",\n        data: []\n      }, {\n        name: \"second_cv_data\",\n        data: []\n      }]\n    };\n  },\n  mounted() {\n    let lookUpUrlActiveDevices = this.$apiUrl + \"/visualiser\";\n    let lookUpHeadersActiveDevices = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": this.$apiKey\n      }\n    };\n    let lookUpRequestActiveDevices = {\n      RequestType: \"ActiveDevices\",\n      DataDict: [{\n        DeviceID: \"\",\n        ReadingDate: \"\"\n      }]\n    };\n    axios.post(lookUpUrlActiveDevices, lookUpRequestActiveDevices, lookUpHeadersActiveDevices).then(response => {\n      this.activeDevices = [{\n        text: \"Please select a Device ID\",\n        value: \"Placeholder\"\n      }];\n      for (let i = 0; i < response.data.Values.length; i++) {\n        this.activeDevices.push({\n          text: response.data.Values[i],\n          value: response.data.Values[i]\n        });\n      }\n    });\n  },\n  methods: {\n    loadDeviceDates(device_id) {\n      this.firstSelectedDate = \"\", this.secondSelectedDate = \"\", this.firstSelectedTime = \"\", this.secondSelectedTime = \"\", this.firstGraphGenerated = false, this.secondGraphGenerated = false, this.firstVoltageList = [], this.firstCurrentList = [], this.formattedFirstDateReadings = [], this.formattedSecondDateReadings = [], this.formattedFirstCv = [], this.formattedSecondCv = [], this.currentList = [], this.voltageList = [], this.firstGraphReadings = null, this.secondGraphReadings = null, this.deviceDateMin = \"\", this.deviceDateMax = \"\", this.selectedComparison = \"Side by Side\";\n      let lookUpUrlDeviceDates = this.$apiUrl + \"/visualiser\";\n      let lookUpHeadersDeviceDates = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": this.$apiKey\n        }\n      };\n      let lookUpRequestDeviceDates = {\n        RequestType: \"LoadDeviceDates\",\n        DataDict: [{\n          DeviceID: device_id\n        }]\n      };\n      axios.post(lookUpUrlDeviceDates, lookUpRequestDeviceDates, lookUpHeadersDeviceDates).then(response => {\n        this.deviceDateMin = response.data.Values[0][0];\n        this.deviceDateMax = response.data.Values[0][1];\n        this.deviceReadingDates = response.data.ReadingDates;\n      });\n    },\n    generateFirstGraph() {\n      let lookUpUrlFirstCVData = this.$apiUrl + \"/visualiser\";\n      let lookUpHeadersFirstCVData = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": this.$apiKey\n        }\n      };\n      let lookUpRequestFirstCVData = {\n        RequestType: \"LoadCVData\",\n        DataDict: [{\n          DeviceID: this.selectDeviceID,\n          ReadingDate: this.firstSelectedDate,\n          ReadingTime: this.firstSelectedTime\n        }]\n      };\n      axios.post(lookUpUrlFirstCVData, lookUpRequestFirstCVData, lookUpHeadersFirstCVData).then(response => {\n        this.firstVoltageList = response.data.VoltageList;\n        this.firstCurrentList = response.data.CurrentList;\n        this.formatCV(this.firstVoltageList, this.firstCurrentList);\n        this.firstChartKey += 1;\n        this.firstGraphGenerated = true;\n      });\n    },\n    generateSecondGraph() {\n      let lookUpUrlSecondCVData = this.$apiUrl + \"/visualiser\";\n      let lookUpHeadersSecondCVData = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": this.$apiKey\n        }\n      };\n      let lookUpRequestSecondCVData = {\n        RequestType: \"LoadCVData\",\n        DataDict: [{\n          DeviceID: this.selectDeviceID,\n          ReadingDate: this.secondSelectedDate,\n          ReadingTime: this.secondSelectedTime\n        }]\n      };\n      axios.post(lookUpUrlSecondCVData, lookUpRequestSecondCVData, lookUpHeadersSecondCVData).then(response => {\n        this.secondVoltageList = response.data.VoltageList;\n        this.secondCurrentList = response.data.CurrentList;\n        this.formatCV2(this.secondVoltageList, this.secondCurrentList);\n        this.secondChartKey += 1;\n        this.secondGraphGenerated = true;\n      });\n    },\n    timeSelectedFirst(time) {\n      this.firstSelectedTime = \"\";\n      for (let i = 0; i < this.firstGraphReadings.length; i++) {\n        if (this.formattedFirstDateReadings[i].time == time.time) {\n          this.formattedFirstDateReadings[i].selected = true;\n          this.firstSelectedTime = this.formattedFirstDateReadings[i].time;\n        } else {\n          this.formattedFirstDateReadings[i].selected = false;\n        }\n      }\n    },\n    timeSelectedSecond(time) {\n      for (let i = 0; i < this.secondGraphReadings.length; i++) {\n        if (this.formattedSecondDateReadings[i].time == time.time) {\n          this.formattedSecondDateReadings[i].selected = true;\n          this.secondSelectedTime = this.formattedSecondDateReadings[i].time;\n        } else {\n          this.formattedSecondDateReadings[i].selected = false;\n        }\n      }\n    },\n    resetSelection() {\n      this.firstSelectedDate = \"\", this.secondSelectedDate = \"\", this.firstSelectedTime = \"\", this.secondSelectedTime = \"\", this.firstGraphGenerated = false, this.secondGraphGenerated = false, this.firstVoltageList = [], this.firstCurrentList = [], this.formattedFirstDateReadings = [], this.formattedSecondDateReadings = [], this.formattedFirstCv = [], this.formattedSecondCv = [], this.currentList = [], this.voltageList = [], this.firstGraphReadings = null, this.secondGraphReadings = null, this.selectDeviceID = \"Placeholder\", this.deviceDateMin = \"\", this.deviceDateMax = \"\", this.selectedComparison = \"Side by Side\", this.selectedGraphType = \"Individual\";\n    },\n    loadCVReadings(deviceID, firstDate, secondDate) {\n      this.firstSelectedTime = \"\", this.secondSelectedTime = \"\", this.firstGraphGenerated = false, this.secondGraphGenerated = false, this.selectedComparison = \"Side by Side\", this.firstVoltageList = [], this.firstCurrentList = [], this.formattedFirstDateReadings = [], this.formattedSecondDateReadings = [], this.formattedFirstCv = [], this.formattedSecondCv = [], this.currentList = [], this.voltageList = [], this.firstGraphReadings = null, this.secondGraphReadings = null;\n      if (this.selectedGraphType == \"Comparison\") {\n        if (firstDate == \"\" || secondDate == \"\") {\n          alert(\"Please Enter a Device ID, First Graph Date, and Second Graph Date to View Readings.\");\n          return;\n        }\n      } else if (this.selectedGraphType == \"Individual\") {\n        if (firstDate == \"\") {\n          alert(\"Please Enter a Device ID and a Reading Date to View Readings.\");\n          return;\n        }\n      }\n      let lookUpUrlCVReadings = this.$apiUrl + \"/visualiser\";\n      let lookUpHeadersCVReadings = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": this.$apiKey\n        }\n      };\n      let lookUpRequestCVReadings = {\n        RequestType: \"LoadCVReadingTimes\",\n        DataDict: [{\n          DeviceID: deviceID,\n          FirstDate: firstDate,\n          SecondDate: secondDate\n        }]\n      };\n      axios.post(lookUpUrlCVReadings, lookUpRequestCVReadings, lookUpHeadersCVReadings).then(response => {\n        console.log(lookUpRequestCVReadings);\n        console.log(response);\n        if (response.data.statusCode != 400) {\n          this.formattedFirstDateReadings = [];\n          this.formattedSecondDateReadings = [];\n          this.firstGraphReadings = [];\n          this.secondGraphReadings = [];\n          if (response.data.FirstDateReadings.length == 0) {\n            this.firstGraphReadings = \"No Data\";\n          } else {\n            this.firstGraphReadings = response.data.FirstDateReadings;\n          }\n          if (response.data.SecondDateReadings.length == 0) {\n            this.secondGraphReadings = \"No Data\";\n          } else {\n            this.secondGraphReadings = response.data.SecondDateReadings;\n          }\n          if (this.firstGraphReadings != \"No Data\") {\n            for (let i = 0; i < this.firstGraphReadings.length; i++) {\n              this.formattedFirstDateReadings.push({\n                time: this.firstGraphReadings[i][0],\n                selected: false\n              });\n            }\n          }\n          if (this.secondGraphReadings != \"No Data\") {\n            for (let i = 0; i < this.secondGraphReadings.length; i++) {\n              this.formattedSecondDateReadings.push({\n                time: this.secondGraphReadings[i][0],\n                selected: false\n              });\n            }\n          }\n        }\n        this.firstGraphGenerated = false;\n        this.secondGraphGenerated = false;\n      });\n    },\n    formatCV(voltageList, currentList) {\n      this.voltageList = voltageList;\n      this.currentList = currentList;\n      this.formattedFirstCv = [];\n      for (let i = 0; i < this.voltageList.length; i++) {\n        this.formattedFirstCv.push({\n          x: this.voltageList[i],\n          y: this.currentList[i]\n        });\n      }\n      this.series1 = [{\n        name: \"first_cv_data\",\n        data: this.formattedFirstCv\n      }];\n      this.overlappedSeries = [{\n        name: \"first_cv_data\",\n        data: this.formattedFirstCv\n      }, {\n        name: \"second_cv_data\",\n        data: this.formattedSecondCv\n      }];\n    },\n    formatCV2(voltageList, currentList) {\n      this.voltageList = voltageList;\n      this.currentList = currentList;\n      this.formattedSecondCv = [];\n      for (let i = 0; i < this.voltageList.length; i++) {\n        this.formattedSecondCv.push({\n          x: this.voltageList[i],\n          y: this.currentList[i]\n        });\n      }\n      this.series2 = [{\n        name: \"second_cv_data\",\n        data: this.formattedSecondCv\n      }];\n      this.overlappedSeries = [{\n        name: \"first_cv_data\",\n        data: this.formattedFirstCv\n      }, {\n        name: \"second_cv_data\",\n        data: this.formattedSecondCv\n      }];\n    }\n  }\n};","map":{"version":3,"names":["axios","data","hideFooter","deviceDateMin","deviceDateMax","firstChartKey","secondChartKey","firstSelectedDate","secondSelectedDate","firstSelectedTime","secondSelectedTime","firstGraphGenerated","secondGraphGenerated","firstVoltageList","firstCurrentList","formattedFirstDateReadings","formattedSecondDateReadings","formattedFirstCv","formattedSecondCv","currentList","voltageList","firstGraphReadings","secondGraphReadings","selectDeviceID","selectedComparison","selectedGraphType","activeDevices","compOptions","text","value","typeOptions","chartOptions","stroke","curve","width","chart","id","xaxis","type","tickAmount","decimalsInFloat","series1","name","series2","overlappedSeries","mounted","lookUpUrlActiveDevices","$apiUrl","lookUpHeadersActiveDevices","headers","$apiKey","lookUpRequestActiveDevices","RequestType","DataDict","DeviceID","ReadingDate","post","then","response","i","Values","length","push","methods","loadDeviceDates","device_id","lookUpUrlDeviceDates","lookUpHeadersDeviceDates","lookUpRequestDeviceDates","deviceReadingDates","ReadingDates","generateFirstGraph","lookUpUrlFirstCVData","lookUpHeadersFirstCVData","lookUpRequestFirstCVData","ReadingTime","VoltageList","CurrentList","formatCV","generateSecondGraph","lookUpUrlSecondCVData","lookUpHeadersSecondCVData","lookUpRequestSecondCVData","secondVoltageList","secondCurrentList","formatCV2","timeSelectedFirst","time","selected","timeSelectedSecond","resetSelection","loadCVReadings","deviceID","firstDate","secondDate","alert","lookUpUrlCVReadings","lookUpHeadersCVReadings","lookUpRequestCVReadings","FirstDate","SecondDate","console","log","statusCode","FirstDateReadings","SecondDateReadings","x","y"],"sources":["src/components/MainComponent.vue"],"sourcesContent":["<template>\n  <b-container fluid>\n    <br />\n    <b-row>\n      <b-col cols=\"2\"></b-col>\n      <b-col cols=\"8\">\n        <b-card bg-variant=\"light\">\n          <b-form inline>\n            <label class=\"ml-auto mr-3\" for=\"deviceInput\">Device ID:</label>\n            <b-form-select\n              class=\"mr-auto\"\n              v-model=\"selectDeviceID\"\n              :options=\"activeDevices\"\n              @change=\"loadDeviceDates(selectDeviceID)\"\n              id=\"deviceInput\"\n            ></b-form-select>\n            <label class=\"ml-auto mr-3\" for=\"graphTypeInput\">Graph Type:</label>\n            <b-form-radio-group\n              class=\"mr-auto\"\n              v-model=\"selectedGraphType\"\n              :options=\"typeOptions\"\n              id=\"graphTypeInput\"\n            ></b-form-radio-group>\n          </b-form>\n          <br />\n          <b-form inline v-if=\"this.selectedGraphType == 'Comparison'\">\n            <label class=\"ml-auto mr-3\" for=\"firstDatePicker\"\n              >First Reading Date:</label\n            >\n            <b-form-datepicker\n              v-model=\"firstSelectedDate\"\n              locale=\"en\"\n              :min=\"deviceDateMin\"\n              :max=\"deviceDateMax\"\n              id=\"firstDatePicker\"\n            ></b-form-datepicker>\n            <label class=\"ml-auto mr-3\" for=\"secondDatePicker\"\n              >Second Reading Date:</label\n            >\n            <b-form-datepicker\n              v-model=\"secondSelectedDate\"\n              locale=\"en\"\n              :min=\"deviceDateMin\"\n              :max=\"deviceDateMax\"\n              id=\"secondDatePicker\"\n            ></b-form-datepicker>\n          </b-form>\n          <b-form inline v-if=\"this.selectedGraphType == 'Individual'\">\n            <b-col cols=\"3\"></b-col>\n            <b-col cols=\"6\">\n              <label for=\"firstDatePicker\">Reading Date:</label>\n              <b-form-datepicker\n                v-model=\"firstSelectedDate\"\n                locale=\"en\"\n                :min=\"deviceDateMin\"\n                :max=\"deviceDateMax\"\n                id=\"firstDatePicker\"\n              ></b-form-datepicker\n            ></b-col>\n          </b-form>\n        </b-card>\n      </b-col>\n    </b-row>\n\n    <b-row>\n      <b-col cols=\"2\"></b-col>\n      <b-col cols=\"8\">\n        <b-card bg-variant=\"light\">\n          <b-row>\n            <b-col cols=\"6\">\n              <b-row>\n                <b-col cols=\"4\" class=\"px-auto\">\n                  <p class=\"text-center\">Select Device ID:</p>\n                </b-col>\n                <b-col cols=\"8\" class=\"px-auto\">\n                  <b-form-select\n                    v-model=\"selectDeviceID\"\n                    :options=\"activeDevices\"\n                    @change=\"loadDeviceDates(selectDeviceID)\"\n                  ></b-form-select>\n                </b-col>\n              </b-row>\n            </b-col>\n            <b-col cols=\"6\"\n              ><div>\n                <b-form-group label=\"Graph Type:\" v-slot=\"{ ariaDescribedby }\">\n                  <br />\n                  <b-form-radio-group\n                    v-model=\"selectedGraphType\"\n                    :aria-describedby=\"ariaDescribedby\"\n                    :options=\"typeOptions\"\n                    name=\"type-inline\"\n                  ></b-form-radio-group>\n                </b-form-group>\n              </div>\n            </b-col>\n          </b-row>\n          <br />\n          <b-row v-if=\"this.selectedGraphType == 'Comparison'\">\n            <b-col cols=\"6\"\n              ><p>Select First Reading Date:</p>\n              <b-form-datepicker\n                v-model=\"firstSelectedDate\"\n                locale=\"en\"\n                :min=\"deviceDateMin\"\n                :max=\"deviceDateMax\"\n              ></b-form-datepicker\n            ></b-col>\n            <b-col cols=\"6\"\n              ><p>Select Second Reading Date:</p>\n              <b-form-datepicker\n                v-model=\"secondSelectedDate\"\n                locale=\"en\"\n                :min=\"deviceDateMin\"\n                :max=\"deviceDateMax\"\n              ></b-form-datepicker\n            ></b-col>\n          </b-row>\n          <b-row v-if=\"this.selectedGraphType == 'Individual'\">\n            <b-col cols=\"3\"></b-col>\n            <b-col cols=\"6\"\n              ><p>Select Reading Date:</p>\n              <b-form-datepicker\n                v-model=\"firstSelectedDate\"\n                locale=\"en\"\n                :min=\"deviceDateMin\"\n                :max=\"deviceDateMax\"\n              ></b-form-datepicker\n            ></b-col>\n          </b-row>\n          <br />\n          <b-row>\n            <b-button\n              class=\"m-1 ml-auto\"\n              variant=\"info\"\n              v-on:click=\"\n                loadCVReadings(\n                  selectDeviceID,\n                  firstSelectedDate,\n                  secondSelectedDate\n                )\n              \"\n            >\n              View Readings\n            </b-button>\n            <b-button\n              class=\"m-1 mr-auto\"\n              variant=\"secondary\"\n              v-on:click=\"resetSelection()\"\n            >\n              Reset\n            </b-button>\n          </b-row>\n        </b-card>\n      </b-col>\n    </b-row>\n\n    <br />\n    <div\n      v-if=\"this.firstGraphReadings != null && this.secondGraphReadings != null\"\n    >\n      <b-row v-if=\"this.selectedGraphType == 'Comparison'\">\n        <b-col cols=\"2\"> </b-col>\n        <b-col cols=\"8\">\n          <b-card>\n            <div>\n              <b-form-group\n                v-if=\"\n                  this.firstGraphGenerated == true &&\n                  this.secondGraphGenerated == true\n                \"\n                label=\"Comparison Mode:\"\n                v-slot=\"{ ariaDescribedby }\"\n              >\n                <b-form-radio-group\n                  v-model=\"selectedComparison\"\n                  :aria-describedby=\"ariaDescribedby\"\n                  :options=\"compOptions\"\n                  name=\"comp-inline\"\n                ></b-form-radio-group>\n              </b-form-group>\n              <hr />\n            </div>\n            <b-row>\n              <b-col\n                v-if=\"this.selectedComparison == 'Overlapped'\"\n                cols=\"3\"\n              ></b-col>\n              <b-col v-if=\"this.selectedComparison == 'Overlapped'\" cols=\"6\"\n                ><b-card\n                  class=\"graphCard\"\n                  v-if=\"\n                    this.firstGraphGenerated == true &&\n                    this.secondGraphGenerated == true &&\n                    this.selectedComparison == 'Overlapped'\n                  \"\n                >\n                  <b-row>\n                    <b-col cols=\"10\">\n                      <p>\n                        First Reading Time:\n                        <b>{{ this.firstSelectedTime }}</b>\n                        | Second Reading Time:\n                        <b>{{ this.secondSelectedTime }}</b>\n                      </p>\n                    </b-col>\n                    <b-col cols=\"2\">\n                      <b-button\n                        v-on:click=\"\n                          (firstGraphGenerated = false),\n                            (secondGraphGenerated = false),\n                            (selectedComparison = 'Side by Side')\n                        \"\n                        variant=\"light\"\n                        class=\"backButton ml-0\"\n                        pill\n                        size=\"sm\"\n                      >\n                        <b-icon scale=\"0.7\" icon=\"x-lg\"></b-icon\n                      ></b-button>\n                    </b-col>\n                  </b-row>\n                  <ApexChart\n                    width=\"100%\"\n                    type=\"line\"\n                    :options=\"chartOptions\"\n                    :series=\"overlappedSeries\"\n                  ></ApexChart>\n\n                  <template #footer>\n                    <div>\n                      <b-button\n                        class=\"m-1 ml-auto\"\n                        variant=\"info\"\n                        v-b-modal=\"'ovdata-modal1'\"\n                        >View First Data</b-button\n                      >\n                      <b-modal\n                        id=\"ovdata-modal1\"\n                        scrollable\n                        title=\"First Graph CV Data\"\n                      >\n                        <b>Data Set 1</b>\n                        <hr />\n                        <p>{{ firstVoltageList }}</p>\n                        <b>Data Set 2</b>\n                        <hr />\n                        <p>{{ firstCurrentList }}</p>\n                      </b-modal>\n                      <b-button\n                        class=\"m-1 ml-auto\"\n                        variant=\"info\"\n                        v-b-modal=\"'ovdata-modal2'\"\n                        >View Second Data</b-button\n                      >\n                      <b-modal\n                        id=\"ovdata-modal2\"\n                        scrollable\n                        title=\"Second Graph CV Data\"\n                      >\n                        <b>Data Set 1</b>\n                        <hr />\n                        <p>{{ secondVoltageList }}</p>\n                        <b>Data Set 2</b>\n                        <hr />\n                        <p>{{ secondCurrentList }}</p>\n                      </b-modal>\n                    </div>\n                  </template>\n                </b-card></b-col\n              >\n              <b-col cols=\"6\">\n                <b-card\n                  class=\"graphCard mx\"\n                  v-if=\"this.firstGraphReadings == 'No Data'\"\n                >\n                  <p>No data available - Please select another date.</p>\n                </b-card>\n                <b-card\n                  class=\"graphCard\"\n                  v-if=\"\n                    (this.firstGraphGenerated == true &&\n                      this.selectedComparison == 'Side by Side') ||\n                    (this.firstGraphGenerated == true &&\n                      this.secondGraphGenerated == false &&\n                      this.selectedComparison == 'Overlapped')\n                  \"\n                >\n                  <b-row>\n                    <b-col cols=\"10\">\n                      <p>\n                        Reading Time:\n                        <b>{{ this.firstSelectedTime }}</b>\n                      </p>\n                    </b-col>\n                    <b-col cols=\"2\">\n                      <b-button\n                        v-on:click=\"firstGraphGenerated = false\"\n                        variant=\"light\"\n                        class=\"backButton ml-0\"\n                        pill\n                        size=\"sm\"\n                      >\n                        <b-icon scale=\"0.7\" icon=\"x-lg\"></b-icon\n                      ></b-button>\n                    </b-col>\n                  </b-row>\n                  <ApexChart\n                    width=\"100%\"\n                    type=\"line\"\n                    :options=\"chartOptions\"\n                    :series=\"series1\"\n                    :key=\"firstChartKey\"\n                  ></ApexChart>\n                  <template #footer\n                    ><b-button\n                      class=\"ml-auto\"\n                      variant=\"info\"\n                      v-b-modal.data-modal1\n                      >View Data</b-button\n                    >\n\n                    <b-modal\n                      id=\"data-modal1\"\n                      scrollable\n                      :hide-footer=\"hideFooter\"\n                      title=\"First Graph CV Data\"\n                    >\n                      <b>Voltage List</b>\n                      <hr />\n                      <p>{{ firstVoltageList }}</p>\n                      <b>Current List</b>\n                      <hr />\n                      <p>{{ firstCurrentList }}</p>\n                    </b-modal>\n                  </template>\n                </b-card>\n                <b-card\n                  class=\"graphCard\"\n                  v-if=\"\n                    this.firstGraphReadings != 'No Data' &&\n                    this.firstGraphGenerated == false\n                  \"\n                >\n                  <template #footer>\n                    <b-button\n                      v-if=\"firstSelectedTime != ''\"\n                      variant=\"info\"\n                      v-on:click=\"generateFirstGraph()\"\n                      >Generate Graph</b-button\n                    >\n                    <b-button\n                      v-if=\"firstSelectedTime == ''\"\n                      disabled\n                      variant=\"info\"\n                      v-on:click=\"generateFirstGraph()\"\n                      >Generate Graph</b-button\n                    ></template\n                  >\n                  <b-list-group class=\"overflow-auto list-group\">\n                    <b-list-group-item\n                      button\n                      v-on:click=\"timeSelectedFirst(time)\"\n                      v-for=\"time in this.formattedFirstDateReadings\"\n                      :key=\"time.time\"\n                      class=\"d-flex justify-content-between align-items-center\"\n                    >\n                      {{ time.time }} Reading\n                      <b-badge variant=\"info\" v-if=\"time.selected == true\" pill\n                        >&#10003;</b-badge\n                      >\n                    </b-list-group-item>\n                  </b-list-group>\n                  <br />\n                </b-card>\n              </b-col>\n              <b-col cols=\"6\">\n                <b-card\n                  class=\"graphCard\"\n                  v-if=\"this.secondGraphReadings == 'No Data'\"\n                >\n                  <p>No data available - Please select another date.</p>\n                </b-card>\n                <b-card\n                  class=\"graphCard\"\n                  v-if=\"\n                    (this.secondGraphGenerated == true &&\n                      this.selectedComparison == 'Side by Side') ||\n                    (this.firstGraphGenerated == false &&\n                      this.secondGraphGenerated == true &&\n                      this.selectedComparison == 'Overlapped')\n                  \"\n                >\n                  <b-row>\n                    <b-col cols=\"10\">\n                      <p>\n                        Reading Time:\n                        <b>{{ this.secondSelectedTime }}</b>\n                      </p>\n                    </b-col>\n                    <b-col cols=\"2\">\n                      <b-button\n                        v-on:click=\"secondGraphGenerated = false\"\n                        variant=\"light\"\n                        class=\"backButton ml-0\"\n                        pill\n                        size=\"sm\"\n                      >\n                        <b-icon scale=\"0.7\" icon=\"x-lg\"></b-icon\n                      ></b-button>\n                    </b-col>\n                  </b-row>\n                  <ApexChart\n                    width=\"100%\"\n                    type=\"line\"\n                    :options=\"chartOptions\"\n                    :series=\"series2\"\n                    :key=\"secondChartKey\"\n                  ></ApexChart>\n                  <template #footer\n                    ><b-button\n                      class=\"ml-auto\"\n                      variant=\"info\"\n                      v-b-modal.data-modal2\n                      >View Data</b-button\n                    >\n                    <b-modal\n                      id=\"data-modal2\"\n                      scrollable\n                      :hide-footer=\"hideFooter\"\n                      title=\"Second Graph CV Data\"\n                    >\n                      <b>Voltage List</b>\n                      <hr />\n                      <p>{{ secondVoltageList }}</p>\n                      <b>Current List</b>\n                      <hr />\n                      <p>{{ secondCurrentList }}</p>\n                    </b-modal></template\n                  >\n                </b-card>\n                <b-card\n                  class=\"graphCard\"\n                  v-if=\"\n                    this.secondGraphReadings != 'No Data' &&\n                    this.secondGraphGenerated == false\n                  \"\n                >\n                  <template #footer>\n                    <b-button\n                      v-if=\"secondSelectedTime != ''\"\n                      variant=\"info\"\n                      v-on:click=\"generateSecondGraph()\"\n                      >Generate Graph</b-button\n                    >\n                    <b-button\n                      v-if=\"secondSelectedTime == ''\"\n                      disabled\n                      variant=\"info\"\n                      v-on:click=\"generateSecondGraph()\"\n                      >Generate Graph</b-button\n                    >\n                  </template>\n                  <b-list-group class=\"overflow-auto list-group\">\n                    <b-list-group-item\n                      button\n                      v-on:click=\"timeSelectedSecond(time)\"\n                      v-for=\"time in this.formattedSecondDateReadings\"\n                      :key=\"time.time\"\n                      class=\"d-flex justify-content-between align-items-center\"\n                    >\n                      {{ time.time }} Reading\n                      <b-badge variant=\"info\" v-if=\"time.selected == true\" pill\n                        >&#10003;</b-badge\n                      >\n                    </b-list-group-item>\n                  </b-list-group>\n                  <br />\n                </b-card>\n              </b-col>\n              <b-col cols=\"2\"> </b-col>\n            </b-row>\n          </b-card>\n        </b-col>\n      </b-row>\n      <b-row v-if=\"this.selectedGraphType == 'Individual'\">\n        <b-col cols=\"2\"> </b-col>\n        <b-col cols=\"8\">\n          <b-card>\n            <b-row>\n              <b-col cols=\"3\"></b-col>\n              <b-col cols=\"6\"\n                ><b-card\n                  class=\"graphCard\"\n                  v-if=\"this.firstGraphGenerated == true\"\n                >\n                  <b-row>\n                    <b-col cols=\"10\">\n                      <p>\n                        Reading Time:\n                        <b>{{ this.firstSelectedTime }}</b>\n                      </p>\n                    </b-col>\n                    <b-col cols=\"2\">\n                      <b-button\n                        v-on:click=\"firstGraphGenerated = false\"\n                        variant=\"light\"\n                        class=\"backButton ml-0\"\n                        pill\n                        size=\"sm\"\n                      >\n                        <b-icon scale=\"0.7\" icon=\"x-lg\"></b-icon\n                      ></b-button>\n                    </b-col>\n                  </b-row>\n                  <ApexChart\n                    width=\"100%\"\n                    type=\"line\"\n                    :options=\"chartOptions\"\n                    :series=\"series1\"\n                  ></ApexChart>\n\n                  <template #footer>\n                    <div>\n                      <b-button\n                        class=\"m-1 ml-auto\"\n                        variant=\"info\"\n                        v-b-modal=\"'ovdata-modal1'\"\n                        >View Data</b-button\n                      >\n                      <b-modal id=\"ovdata-modal1\" scrollable title=\"CV Data\">\n                        <b>Data Set 1</b>\n                        <hr />\n                        <p>{{ firstVoltageList }}</p>\n                        <b>Data Set 2</b>\n                        <hr />\n                        <p>{{ firstCurrentList }}</p>\n                      </b-modal>\n                    </div>\n                  </template>\n                </b-card>\n                <b-card\n                  class=\"graphCard mx\"\n                  v-if=\"this.firstGraphReadings == 'No Data'\"\n                >\n                  <p>No data available - Please select another date.</p>\n                </b-card>\n\n                <b-card\n                  class=\"graphCard\"\n                  v-if=\"\n                    this.firstGraphReadings != 'No Data' &&\n                    this.firstGraphGenerated == false\n                  \"\n                >\n                  <template #footer>\n                    <b-button\n                      v-if=\"firstSelectedTime != ''\"\n                      variant=\"info\"\n                      v-on:click=\"generateFirstGraph()\"\n                      >Generate Graph</b-button\n                    >\n                    <b-button\n                      v-if=\"firstSelectedTime == ''\"\n                      disabled\n                      variant=\"info\"\n                      v-on:click=\"generateFirstGraph()\"\n                      >Generate Graph</b-button\n                    ></template\n                  >\n                  <b-list-group class=\"overflow-auto list-group\">\n                    <b-list-group-item\n                      button\n                      v-on:click=\"timeSelectedFirst(time)\"\n                      v-for=\"time in this.formattedFirstDateReadings\"\n                      :key=\"time.time\"\n                      class=\"d-flex justify-content-between align-items-center\"\n                    >\n                      {{ time.time }} Reading\n                      <b-badge variant=\"info\" v-if=\"time.selected == true\" pill\n                        >&#10003;</b-badge\n                      >\n                    </b-list-group-item>\n                  </b-list-group>\n                  <br />\n                </b-card>\n              </b-col>\n            </b-row>\n          </b-card>\n        </b-col>\n      </b-row>\n    </div>\n  </b-container>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      hideFooter: true,\n      deviceDateMin: \"\",\n      deviceDateMax: \"\",\n      firstChartKey: 0,\n      secondChartKey: 0,\n      firstSelectedDate: \"\",\n      secondSelectedDate: \"\",\n      firstSelectedTime: \"\",\n      secondSelectedTime: \"\",\n      firstGraphGenerated: false,\n      secondGraphGenerated: false,\n      firstVoltageList: [],\n      firstCurrentList: [],\n      formattedFirstDateReadings: [],\n      formattedSecondDateReadings: [],\n      formattedFirstCv: [],\n      formattedSecondCv: [],\n      currentList: [],\n      voltageList: [],\n      firstGraphReadings: null,\n      secondGraphReadings: null,\n      selectDeviceID: \"Placeholder\",\n      selectedComparison: \"Side by Side\",\n      selectedGraphType: \"Individual\",\n      activeDevices: [],\n      compOptions: [\n        { text: \"Side by Side\", value: \"Side by Side\" },\n        { text: \"Overlapped\", value: \"Overlapped\" },\n      ],\n      typeOptions: [\n        { text: \"Individual\", value: \"Individual\" },\n        { text: \"Comparison\", value: \"Comparison\" },\n      ],\n      chartOptions: {\n        stroke: {\n          curve: \"smooth\",\n          width: \"1\",\n        },\n        chart: {\n          id: \"CV-Chart\",\n        },\n        xaxis: {\n          type: \"numeric\",\n          tickAmount: 5,\n          decimalsInFloat: 1,\n        },\n      },\n      series1: [\n        {\n          name: \"first_cv_data\",\n          data: [],\n        },\n      ],\n      series2: [\n        {\n          name: \"second_cv_data\",\n          data: [],\n        },\n      ],\n      overlappedSeries: [\n        {\n          name: \"first_cv_data\",\n          data: [],\n        },\n        {\n          name: \"second_cv_data\",\n          data: [],\n        },\n      ],\n    };\n  },\n  mounted() {\n    let lookUpUrlActiveDevices = this.$apiUrl + \"/visualiser\";\n    let lookUpHeadersActiveDevices = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": this.$apiKey,\n      },\n    };\n    let lookUpRequestActiveDevices = {\n      RequestType: \"ActiveDevices\",\n      DataDict: [\n        {\n          DeviceID: \"\",\n          ReadingDate: \"\",\n        },\n      ],\n    };\n    axios\n      .post(\n        lookUpUrlActiveDevices,\n        lookUpRequestActiveDevices,\n        lookUpHeadersActiveDevices\n      )\n      .then((response) => {\n        this.activeDevices = [\n          { text: \"Please select a Device ID\", value: \"Placeholder\" },\n        ];\n        for (let i = 0; i < response.data.Values.length; i++) {\n          this.activeDevices.push({\n            text: response.data.Values[i],\n            value: response.data.Values[i],\n          });\n        }\n      });\n  },\n  methods: {\n    loadDeviceDates(device_id) {\n      (this.firstSelectedDate = \"\"),\n        (this.secondSelectedDate = \"\"),\n        (this.firstSelectedTime = \"\"),\n        (this.secondSelectedTime = \"\"),\n        (this.firstGraphGenerated = false),\n        (this.secondGraphGenerated = false),\n        (this.firstVoltageList = []),\n        (this.firstCurrentList = []),\n        (this.formattedFirstDateReadings = []),\n        (this.formattedSecondDateReadings = []),\n        (this.formattedFirstCv = []),\n        (this.formattedSecondCv = []),\n        (this.currentList = []),\n        (this.voltageList = []),\n        (this.firstGraphReadings = null),\n        (this.secondGraphReadings = null),\n        (this.deviceDateMin = \"\"),\n        (this.deviceDateMax = \"\"),\n        (this.selectedComparison = \"Side by Side\");\n      let lookUpUrlDeviceDates = this.$apiUrl + \"/visualiser\";\n      let lookUpHeadersDeviceDates = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": this.$apiKey,\n        },\n      };\n      let lookUpRequestDeviceDates = {\n        RequestType: \"LoadDeviceDates\",\n        DataDict: [\n          {\n            DeviceID: device_id,\n          },\n        ],\n      };\n      axios\n        .post(\n          lookUpUrlDeviceDates,\n          lookUpRequestDeviceDates,\n          lookUpHeadersDeviceDates\n        )\n        .then((response) => {\n          this.deviceDateMin = response.data.Values[0][0];\n          this.deviceDateMax = response.data.Values[0][1];\n          this.deviceReadingDates = response.data.ReadingDates;\n        });\n    },\n    generateFirstGraph() {\n      let lookUpUrlFirstCVData = this.$apiUrl + \"/visualiser\";\n      let lookUpHeadersFirstCVData = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": this.$apiKey,\n        },\n      };\n      let lookUpRequestFirstCVData = {\n        RequestType: \"LoadCVData\",\n        DataDict: [\n          {\n            DeviceID: this.selectDeviceID,\n            ReadingDate: this.firstSelectedDate,\n            ReadingTime: this.firstSelectedTime,\n          },\n        ],\n      };\n      axios\n        .post(\n          lookUpUrlFirstCVData,\n          lookUpRequestFirstCVData,\n          lookUpHeadersFirstCVData\n        )\n        .then((response) => {\n          this.firstVoltageList = response.data.VoltageList;\n          this.firstCurrentList = response.data.CurrentList;\n          this.formatCV(this.firstVoltageList, this.firstCurrentList);\n          this.firstChartKey += 1;\n          this.firstGraphGenerated = true;\n        });\n    },\n    generateSecondGraph() {\n      let lookUpUrlSecondCVData = this.$apiUrl + \"/visualiser\";\n      let lookUpHeadersSecondCVData = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": this.$apiKey,\n        },\n      };\n      let lookUpRequestSecondCVData = {\n        RequestType: \"LoadCVData\",\n        DataDict: [\n          {\n            DeviceID: this.selectDeviceID,\n            ReadingDate: this.secondSelectedDate,\n            ReadingTime: this.secondSelectedTime,\n          },\n        ],\n      };\n      axios\n        .post(\n          lookUpUrlSecondCVData,\n          lookUpRequestSecondCVData,\n          lookUpHeadersSecondCVData\n        )\n        .then((response) => {\n          this.secondVoltageList = response.data.VoltageList;\n          this.secondCurrentList = response.data.CurrentList;\n          this.formatCV2(this.secondVoltageList, this.secondCurrentList);\n          this.secondChartKey += 1;\n          this.secondGraphGenerated = true;\n        });\n    },\n    timeSelectedFirst(time) {\n      this.firstSelectedTime = \"\";\n      for (let i = 0; i < this.firstGraphReadings.length; i++) {\n        if (this.formattedFirstDateReadings[i].time == time.time) {\n          this.formattedFirstDateReadings[i].selected = true;\n          this.firstSelectedTime = this.formattedFirstDateReadings[i].time;\n        } else {\n          this.formattedFirstDateReadings[i].selected = false;\n        }\n      }\n    },\n    timeSelectedSecond(time) {\n      for (let i = 0; i < this.secondGraphReadings.length; i++) {\n        if (this.formattedSecondDateReadings[i].time == time.time) {\n          this.formattedSecondDateReadings[i].selected = true;\n          this.secondSelectedTime = this.formattedSecondDateReadings[i].time;\n        } else {\n          this.formattedSecondDateReadings[i].selected = false;\n        }\n      }\n    },\n    resetSelection() {\n      (this.firstSelectedDate = \"\"),\n        (this.secondSelectedDate = \"\"),\n        (this.firstSelectedTime = \"\"),\n        (this.secondSelectedTime = \"\"),\n        (this.firstGraphGenerated = false),\n        (this.secondGraphGenerated = false),\n        (this.firstVoltageList = []),\n        (this.firstCurrentList = []),\n        (this.formattedFirstDateReadings = []),\n        (this.formattedSecondDateReadings = []),\n        (this.formattedFirstCv = []),\n        (this.formattedSecondCv = []),\n        (this.currentList = []),\n        (this.voltageList = []),\n        (this.firstGraphReadings = null),\n        (this.secondGraphReadings = null),\n        (this.selectDeviceID = \"Placeholder\"),\n        (this.deviceDateMin = \"\"),\n        (this.deviceDateMax = \"\"),\n        (this.selectedComparison = \"Side by Side\"),\n        (this.selectedGraphType = \"Individual\");\n    },\n    loadCVReadings(deviceID, firstDate, secondDate) {\n      (this.firstSelectedTime = \"\"),\n        (this.secondSelectedTime = \"\"),\n        (this.firstGraphGenerated = false),\n        (this.secondGraphGenerated = false),\n        (this.selectedComparison = \"Side by Side\"),\n        (this.firstVoltageList = []),\n        (this.firstCurrentList = []),\n        (this.formattedFirstDateReadings = []),\n        (this.formattedSecondDateReadings = []),\n        (this.formattedFirstCv = []),\n        (this.formattedSecondCv = []),\n        (this.currentList = []),\n        (this.voltageList = []),\n        (this.firstGraphReadings = null),\n        (this.secondGraphReadings = null);\n      if (this.selectedGraphType == \"Comparison\") {\n        if (firstDate == \"\" || secondDate == \"\") {\n          alert(\n            \"Please Enter a Device ID, First Graph Date, and Second Graph Date to View Readings.\"\n          );\n          return;\n        }\n      } else if (this.selectedGraphType == \"Individual\") {\n        if (firstDate == \"\") {\n          alert(\n            \"Please Enter a Device ID and a Reading Date to View Readings.\"\n          );\n          return;\n        }\n      }\n      let lookUpUrlCVReadings = this.$apiUrl + \"/visualiser\";\n      let lookUpHeadersCVReadings = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": this.$apiKey,\n        },\n      };\n      let lookUpRequestCVReadings = {\n        RequestType: \"LoadCVReadingTimes\",\n        DataDict: [\n          {\n            DeviceID: deviceID,\n            FirstDate: firstDate,\n            SecondDate: secondDate,\n          },\n        ],\n      };\n      axios\n        .post(\n          lookUpUrlCVReadings,\n          lookUpRequestCVReadings,\n          lookUpHeadersCVReadings\n        )\n        .then((response) => {\n          console.log(lookUpRequestCVReadings);\n          console.log(response);\n          if (response.data.statusCode != 400) {\n            this.formattedFirstDateReadings = [];\n            this.formattedSecondDateReadings = [];\n            this.firstGraphReadings = [];\n            this.secondGraphReadings = [];\n            if (response.data.FirstDateReadings.length == 0) {\n              this.firstGraphReadings = \"No Data\";\n            } else {\n              this.firstGraphReadings = response.data.FirstDateReadings;\n            }\n            if (response.data.SecondDateReadings.length == 0) {\n              this.secondGraphReadings = \"No Data\";\n            } else {\n              this.secondGraphReadings = response.data.SecondDateReadings;\n            }\n            if (this.firstGraphReadings != \"No Data\") {\n              for (let i = 0; i < this.firstGraphReadings.length; i++) {\n                this.formattedFirstDateReadings.push({\n                  time: this.firstGraphReadings[i][0],\n                  selected: false,\n                });\n              }\n            }\n            if (this.secondGraphReadings != \"No Data\") {\n              for (let i = 0; i < this.secondGraphReadings.length; i++) {\n                this.formattedSecondDateReadings.push({\n                  time: this.secondGraphReadings[i][0],\n                  selected: false,\n                });\n              }\n            }\n          }\n          this.firstGraphGenerated = false;\n          this.secondGraphGenerated = false;\n        });\n    },\n    formatCV(voltageList, currentList) {\n      this.voltageList = voltageList;\n      this.currentList = currentList;\n      this.formattedFirstCv = [];\n      for (let i = 0; i < this.voltageList.length; i++) {\n        this.formattedFirstCv.push({\n          x: this.voltageList[i],\n          y: this.currentList[i],\n        });\n      }\n      this.series1 = [\n        {\n          name: \"first_cv_data\",\n          data: this.formattedFirstCv,\n        },\n      ];\n      this.overlappedSeries = [\n        {\n          name: \"first_cv_data\",\n          data: this.formattedFirstCv,\n        },\n        {\n          name: \"second_cv_data\",\n          data: this.formattedSecondCv,\n        },\n      ];\n    },\n    formatCV2(voltageList, currentList) {\n      this.voltageList = voltageList;\n      this.currentList = currentList;\n      this.formattedSecondCv = [];\n      for (let i = 0; i < this.voltageList.length; i++) {\n        this.formattedSecondCv.push({\n          x: this.voltageList[i],\n          y: this.currentList[i],\n        });\n      }\n      this.series2 = [\n        {\n          name: \"second_cv_data\",\n          data: this.formattedSecondCv,\n        },\n      ];\n      this.overlappedSeries = [\n        {\n          name: \"first_cv_data\",\n          data: this.formattedFirstCv,\n        },\n        {\n          name: \"second_cv_data\",\n          data: this.formattedSecondCv,\n        },\n      ];\n    },\n  },\n};\n</script>\n\n<style></style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}